<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://hclimente.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://hclimente.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-04-29T19:09:14+00:00</updated><id>https://hclimente.github.io/feed.xml</id><title type="html">blank</title><subtitle>Data Scientist. Machine learning + Genetics. </subtitle><entry><title type="html">An intro to uv</title><link href="https://hclimente.github.io/blog/python-uv/" rel="alternate" type="text/html" title="An intro to uv"/><published>2025-04-25T11:59:00+00:00</published><updated>2025-04-25T11:59:00+00:00</updated><id>https://hclimente.github.io/blog/python-uv</id><content type="html" xml:base="https://hclimente.github.io/blog/python-uv/"><![CDATA[<p>Python veterans will be familiar with <code class="language-plaintext highlighter-rouge">pip</code>, <code class="language-plaintext highlighter-rouge">poetry</code>, <code class="language-plaintext highlighter-rouge">pyenv</code>, <code class="language-plaintext highlighter-rouge">conda</code> and a few other tools for managing projects, packages and environments. <a href="https://github.com/astral-sh/uv"><code class="language-plaintext highlighter-rouge">uv</code></a>’s goal is to replace them all while being blazingly fast.</p> <p>We will use <code class="language-plaintext highlighter-rouge">uv</code> for a prototypical machine learning project: train a neural network to classify images of handwritten digits from the <a href="https://en.wikipedia.org/wiki/MNIST_database">MNIST dataset</a> using a <a href="https://en.wikipedia.org/wiki/Convolutional_neural_network">convolutional neural network</a>. The input of the model will be a 28x28 pixel image, and the output will be a vector of 10 probabilities, one for each digit. If you are interested in the details of the model, you can check out the <a href="https://github.com/hclimente/hclimente.github.io/tree/main/assets/python/2025-03-15-python-uv/mnist-classifier">code</a>.</p> <div style="width:50%; margin:0 auto;"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/python/2025-03-15-python-uv/mnist-classifier/img/mnist_examples.webp" sizes="95vw"/> <img src="/assets/python/2025-03-15-python-uv/mnist-classifier/img/mnist_examples.webp" class="img-fluid rounded z-depth-1" width="100%" height="auto" alt="Sample MNIST digits" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> A few examples from MNIST </div> <p>My previous workflow relied on <code class="language-plaintext highlighter-rouge">conda</code> to handle the project environment. I’d start by creating a new conda environment and installing several packages via slow <code class="language-plaintext highlighter-rouge">conda install</code> commands before getting to work. If during model development I needed additional packages, I’d run another <code class="language-plaintext highlighter-rouge">conda install</code> hoping to avoid the dreaded <code class="language-plaintext highlighter-rouge">Solving environment: failed with initial frozen solve. Retrying with flexible solve.</code> error. Once I’d finish, I’d dump my environment into an <code class="language-plaintext highlighter-rouge">environment.yaml</code>, strip-out dev-only dependencies, and hope that the final environment sufficiently resembles the one I worked on. Finally, I’d package the model into a Docker image to get it ready for production.</p> <p>Clearly, I wasn’t thrilled with my old workflow. Let’s see how <code class="language-plaintext highlighter-rouge">uv</code> made it a more pleasant experience.</p> <h1 id="why-uv">Why <code class="language-plaintext highlighter-rouge">uv</code>?</h1> <p>Before diving into the details, it’s worth justifying why we need <em>yet another tool</em> for managing Python-centric data science projects.</p> <p>First, <code class="language-plaintext highlighter-rouge">uv</code> is <strong>fast</strong>. As is common in new high-performance tools, it’s written in Rust, a compiled language known for its performance. It also uses different strategies to speed up package installation, like caching and parallelization. Anyone who has installed a package with <code class="language-plaintext highlighter-rouge">conda</code> knows that package resolution can be a pretty painful experience.</p> <p>Second, <code class="language-plaintext highlighter-rouge">uv</code> boosts <strong>reproducibility</strong>. As we will see below, it makes it easy to create and share virtual environments. This is key to ensure that multiple developers can work on a consistent environment. Furthermore, it facilitates moving projects from development to production.</p> <p>Third, <code class="language-plaintext highlighter-rouge">uv</code> leverages <strong>common standards</strong> within the Python ecosystem. This reduces the risk of being locked into its ecosystem, and makes it easy to collaborate with other developers that use different tools.</p> <p>Last, <code class="language-plaintext highlighter-rouge">uv</code> is <strong>one</strong> tool, which means that I don’t need to remember the syntax of multiple tools, or how to use them together.</p> <details><summary>Why <em>not</em> <code class="language-plaintext highlighter-rouge">uv</code>?</summary> <p>I’m always quite enthusiastic about the new, shinier tool. But before jumping straight into <code class="language-plaintext highlighter-rouge">uv</code>, it’s worth considering the downsides of adopting it.</p> <p>First, <code class="language-plaintext highlighter-rouge">uv</code> is <strong>young</strong>. In contrast, tools like <code class="language-plaintext highlighter-rouge">pip</code>, <code class="language-plaintext highlighter-rouge">conda</code> or <code class="language-plaintext highlighter-rouge">venv</code> have been around for more than a decade. I have no doubt they will be around for at least another decade and are unlikely to pull the rug from under me with breaking changes.</p> <p>Second, and on a related note, <code class="language-plaintext highlighter-rouge">uv</code> is <strong>not widely adopted</strong>. This means that I have had a hard time troubleshooting some errors. It has also meant that it’s not a standard, and you might need to be prepared to advocate for it in your team.</p> <p>Last, <code class="language-plaintext highlighter-rouge">uv</code> is mainly developed by <a href="https://astral.sh">Astral</a>, a VC-backed startup that hasn’t started monetizing their products yet. It remains to be seen how their future business model will impact their tools. I should highlight that <code class="language-plaintext highlighter-rouge">uv</code> is open-source and licensed under MIT, which is somewhat reassuring.</p> <p>I believe that it’s a worthwhile trade-off. But, you know, <em>caveat emptor</em>.</p> </details> <h1 id="starting-a-new-project">Starting a new project</h1> <p>After <a href="https://docs.astral.sh/uv/getting-started/installation/">installing <code class="language-plaintext highlighter-rouge">uv</code></a>, we simply need to run <code class="language-plaintext highlighter-rouge">uv init</code> to start a new project:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv init mnist-classifier
</code></pre></div></div> <p>This creates a directory <code class="language-plaintext highlighter-rouge">mnist-classifier</code> in the current directory containing a few files we’ll soon dig into. One of them is a <a href="https://packaging.python.org/en/latest/guides/writing-pyproject-toml/"><code class="language-plaintext highlighter-rouge">pyproject.toml</code></a> file that stores the project’s metadata and configuration. This is a standard file used by <a href="https://python-poetry.org/docs/pyproject/">many</a> <a href="https://pip.pypa.io/en/stable/reference/build-system/pyproject-toml/">tools</a> <a href="https://docs.astral.sh/ruff/configuration/">in</a> <a href="https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#command-line-options">the</a> <a href="https://docs.pytest.org/en/stable/reference/customize.html#pyproject-toml">Python</a> <a href="https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html">ecosystem</a>. For instance, <code class="language-plaintext highlighter-rouge">pip install .</code> would install all the packages listed under the <code class="language-plaintext highlighter-rouge">dependencies</code> field. The <code class="language-plaintext highlighter-rouge">pyproject.toml</code> file created by <code class="language-plaintext highlighter-rouge">uv</code> looks like this:</p> <div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[project]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"mnist-classifier"</span>
<span class="py">version</span> <span class="p">=</span> <span class="s">"0.1.0"</span>
<span class="py">description</span> <span class="p">=</span> <span class="s">"Add your description here"</span>
<span class="py">readme</span> <span class="p">=</span> <span class="s">"README.md"</span>
<span class="py">requires-python</span> <span class="p">=</span> <span class="py">"&gt;</span><span class="p">=</span><span class="mf">3.10</span><span class="s">"</span><span class="err">
</span><span class="py">dependencies</span> <span class="p">=</span> <span class="p">[]</span>
</code></pre></div></div> <p>Furthermore, it will start a git repository with a sensible <code class="language-plaintext highlighter-rouge">.gitignore</code>.</p> <details><summary>What about <em>package</em> projects?</summary> <p>By default, <code class="language-plaintext highlighter-rouge">uv init</code> creates an <em>application</em> project. This is appropriate for scripts, like simple tools. This is why the command above created a <code class="language-plaintext highlighter-rouge">main.py</code> file, meant to be the entry point of our application. Alternatively, we could create a <em>library</em> project with <code class="language-plaintext highlighter-rouge">uv init --package mnist-classifier-pkg</code>. This would create a new directory <code class="language-plaintext highlighter-rouge">mnist-classifier-pkg</code> and populate it with a standard structure and configuration suitable for a Python library.</p> </details> <h1 id="creating-the-project-environment">Creating the project environment</h1> <p>Multiple Python projects can co-exist on the same machine, each requiring different packages and versions of the same packages. This is facilitated by <em>virtual environments</em>, self-contained directories with their own Python interpreter and installed Python packages. There are multiple solutions to create and manage virtual environments, like <a href="https://docs.python.org/3/library/venv.html"><code class="language-plaintext highlighter-rouge">venv</code></a>, <a href="https://anaconda.org/anaconda/conda"><code class="language-plaintext highlighter-rouge">conda</code></a> or <a href="https://python-poetry.org/"><code class="language-plaintext highlighter-rouge">poetry</code></a>.</p> <p><code class="language-plaintext highlighter-rouge">uv</code> leverages Python’s built-in package to handle virtual environments: <code class="language-plaintext highlighter-rouge">venv</code>. The virtual environment contains its own installation of Python, whose version is specified in <code class="language-plaintext highlighter-rouge">.python-version</code>. <code class="language-plaintext highlighter-rouge">uv init</code> created this file:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3.10
</code></pre></div></div> <p>The virtual environment itself lives in the <code class="language-plaintext highlighter-rouge">.venv</code> directory. When Python runs from within an environment, it uses the packages installed in that environment, and only those packages. Typically we would activate this virtual environment from the terminal with <code class="language-plaintext highlighter-rouge">source .venv/bin/activate</code>. This will append <code class="language-plaintext highlighter-rouge">.venv/bin/</code> to our <code class="language-plaintext highlighter-rouge">PATH</code>, loading the <code class="language-plaintext highlighter-rouge">python</code> located there into our environment. However, this comes with an overhead: we need to remember to activate the environment before running any Python script, and we need to deactivate (<code class="language-plaintext highlighter-rouge">deactivate</code>) it when we are done. This is a source of errors, as we may forget to activate the environment or, worse, forget to deactivate it.</p> <p>That’s why <code class="language-plaintext highlighter-rouge">uv</code> does not require explicitly activating the environment. Instead, we can use <code class="language-plaintext highlighter-rouge">uv run &lt;script&gt;.py</code> to run any Python script or command using the environment’s Python. For instance, <code class="language-plaintext highlighter-rouge">uv init</code> created a short, example script, <code class="language-plaintext highlighter-rouge">main.py</code>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello from mnist-classifier!</span><span class="sh">"</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div> <p>As stated, we can run it using our default Python, as we are used to (<code class="language-plaintext highlighter-rouge">python main.py</code>), maybe after <code class="language-plaintext highlighter-rouge">source .venv/bin/activate</code>. But we can also run it using <code class="language-plaintext highlighter-rouge">uv run main.py</code>, which will run the script using the environment’s Python interpreter. Besides avoiding loading/unloading virtual environments, <code class="language-plaintext highlighter-rouge">uv run</code> will automatically create the project environment if it does not exist. Similarly, we can run an interactive Python session via <code class="language-plaintext highlighter-rouge">uv run python</code>.</p> <h2 id="installing-the-required-packages">Installing the required packages</h2> <p>Upon its first invocation, <code class="language-plaintext highlighter-rouge">uv run main.py</code> creates a virtual environment. To do this, it examines the (empty) <code class="language-plaintext highlighter-rouge">dependencies</code> list in <code class="language-plaintext highlighter-rouge">pyproject.toml</code> and resolves an (empty) set of packages.</p> <p>To start our little data science project, we’ll need to install the <a href="https://pytorch.org/">PyTorch</a> library. Typically I would have run <code class="language-plaintext highlighter-rouge">conda install conda-forge::pytorch</code>; in <code class="language-plaintext highlighter-rouge">uv</code> we use <code class="language-plaintext highlighter-rouge">uv add torch</code> instead. This installs the most recent version of the package that is compatible with our environment (2.7.0). The whole thing took 9 seconds. For comparison, installing <code class="language-plaintext highlighter-rouge">torch</code> with <code class="language-plaintext highlighter-rouge">conda</code> took 48 seconds. Upon installation, <code class="language-plaintext highlighter-rouge">pyproject.toml</code> gets automatically updated to:</p> <div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">dependencies</span> <span class="p">=</span> <span class="p">[</span>
    <span class="py">"torch&gt;</span><span class="p">=</span><span class="mf">2.7</span><span class="err">.</span><span class="mi">0</span><span class="s">",</span><span class="err">
</span><span class="p">]</span>
</code></pre></div></div> <p>This is great, as it allows us to keep track of the packages that we needed for our project, reducing our overhead down the road as the project matures.</p> <p>However, <code class="language-plaintext highlighter-rouge">torch</code> depends, in turn, on other packages, like <code class="language-plaintext highlighter-rouge">numpy</code>. Note that this is not reflected in <code class="language-plaintext highlighter-rouge">pyproject.toml</code>, which lists only our direct dependencies, not every transitive package. Furthermore, as we install additional packages like <code class="language-plaintext highlighter-rouge">torchvision</code> or <code class="language-plaintext highlighter-rouge">matplotlib</code>, <code class="language-plaintext highlighter-rouge">uv</code> will need to resolve all the dependencies and potential conflicts between the packages. <code class="language-plaintext highlighter-rouge">uv</code> keeps an additional file, the lockfile (<code class="language-plaintext highlighter-rouge">uv.lock</code>) that records the exact state of the environment with all the specific package resolutions. The lockfile is thus considerably more thorough than <code class="language-plaintext highlighter-rouge">pyproject.toml</code>. For instance, after <code class="language-plaintext highlighter-rouge">uv add torch</code> it expanded to 353 lines describing all the specific packages, their versions and the metadata that were installed in the environment. This is a small excerpt of the lockfile:</p> <div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[[package]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"filelock"</span>
<span class="py">version</span> <span class="p">=</span> <span class="s">"3.18.0"</span>
<span class="py">source</span> <span class="o">=</span> <span class="p">{</span> <span class="py">registry</span> <span class="p">=</span> <span class="s">"https://pypi.org/simple"</span> <span class="p">}</span>
<span class="py">sdist</span> <span class="o">=</span> <span class="p">{</span> <span class="py">url</span> <span class="p">=</span> <span class="s">"https://files.pythonhosted.org/packages/0a/10/c23352565a6544bdc5353e0b15fc1c563352101f30e24bf500207a54df9a/filelock-3.18.0.tar.gz"</span><span class="p">,</span> <span class="py">hash</span> <span class="p">=</span> <span class="s">"sha256:adbc88eabb99d2fec8c9c1b229b171f18afa655400173ddc653d5d01501fb9f2"</span><span class="p">,</span> <span class="py">size</span> <span class="p">=</span> <span class="mi">18075</span> <span class="p">}</span>
<span class="py">wheels</span> <span class="p">=</span> <span class="p">[</span>
    <span class="err">{</span> <span class="py">url</span> <span class="p">=</span> <span class="s">"https://files.pythonhosted.org/packages/4d/36/2a115987e2d8c300a974597416d9de88f2444426de9571f4b59b2cca3acc/filelock-3.18.0-py3-none-any.whl"</span><span class="p">,</span> <span class="py">hash</span> <span class="p">=</span> <span class="s">"sha256:c401f4f8377c4464e6db25fff06205fd89bdd83b65eb0488ed1b160f780e21de"</span><span class="p">,</span> <span class="py">size</span> <span class="p">=</span> <span class="mi">16215</span> <span class="err">}</span><span class="p">,</span>
<span class="p">]</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">uv.lock</code> should be under git control, providing the exact recipe to replicate an environment. This is key, for instance, to ensure that all developers work on a consistent environment. It can also facilitate moving our code to production, as we’ll see <a href="#training--shipping-the-model">below</a>.</p> <blockquote> <p>If needed, <code class="language-plaintext highlighter-rouge">uv.lock</code> can be exported into a <a href="https://pip.pypa.io/en/stable/reference/requirements-file-format/"><code class="language-plaintext highlighter-rouge">requirements.txt</code></a> file for legacy tools, via <code class="language-plaintext highlighter-rouge">uv export --format=requirements-txt &gt;requirements.txt</code>.</p> </blockquote> <details><summary>Other package management commands</summary> <p>Besides <code class="language-plaintext highlighter-rouge">uv add</code>, there are other commands that can be used to manage packages. For starters, its counterpart <code class="language-plaintext highlighter-rouge">uv remove &lt;package_name&gt;</code> will uninstall <code class="language-plaintext highlighter-rouge">&lt;package_name&gt;</code>. Another command that can trigger package management is <code class="language-plaintext highlighter-rouge">uv run &lt;script&gt;.py</code>. Before running the script, it will ensure that the lockfile is in sync with <code class="language-plaintext highlighter-rouge">pyproject.toml</code> and then ensure that the project environment is in sync with the lockfile.</p> <p>Syncing refers to (un)installing packages in the project environment to match the lockfile. <code class="language-plaintext highlighter-rouge">uv run</code> will do this automatically, as we just saw. But it can also be forced manually with <code class="language-plaintext highlighter-rouge">uv sync</code>.</p> <p>Last, when adding new packages, <code class="language-plaintext highlighter-rouge">uv</code> will tend to be conservative. It will install the most recent version of the package that is compatible with the current environment. To force a specific version, we can use <code class="language-plaintext highlighter-rouge">uv add &lt;package_name&gt;==&lt;version&gt;</code>. For instance, <code class="language-plaintext highlighter-rouge">uv add torch==2.0.1</code> will install version 2.0.1 of <code class="language-plaintext highlighter-rouge">torch</code>, even if a newer version is available. We can request <code class="language-plaintext highlighter-rouge">uv</code> to upgrade all packages if possible with <code class="language-plaintext highlighter-rouge">uv lock --upgrade</code>; or a specific package with <code class="language-plaintext highlighter-rouge">uv lock --upgrade-package &lt;package_name&gt;</code>.</p> <blockquote> <p>To keep compatibility with <code class="language-plaintext highlighter-rouge">pip</code> workflows, <code class="language-plaintext highlighter-rouge">uv</code> also supports <code class="language-plaintext highlighter-rouge">uv pip install &lt;package_name&gt;</code> and <code class="language-plaintext highlighter-rouge">uv pip uninstall &lt;package_name&gt;</code>. These will (un)install the package in the current environment, but it will not update <code class="language-plaintext highlighter-rouge">pyproject.toml</code> or <code class="language-plaintext highlighter-rouge">uv.lock</code>. For this reason, they should be avoided in favor of <code class="language-plaintext highlighter-rouge">uv add</code> and <code class="language-plaintext highlighter-rouge">uv remove</code>.</p> </blockquote> </details> <h2 id="installing-development-only-dependencies">Installing development-only dependencies</h2> <p>As a data scientist, Jupyter notebooks are my bread and butter. In order to run Jupyter notebooks on our <code class="language-plaintext highlighter-rouge">uv</code> environment, we need to install the <a href="https://pypi.org/project/ipykernel/">IPython kernel <code class="language-plaintext highlighter-rouge">ipykernel</code></a>. However, <code class="language-plaintext highlighter-rouge">ipykernel</code>’s role is different from other packages: it is not a dependency of our code, but a tool needed for development. Once my code is ready, I will distribute it as a standalone Python script that has no dependencies on <code class="language-plaintext highlighter-rouge">ipykernel</code>. The same principle applies to tools like <code class="language-plaintext highlighter-rouge">pytest</code>, used to test your code, but which the end-user shouldn’t require unless they intend to contribute to the project.</p> <p><code class="language-plaintext highlighter-rouge">uv</code> allows you to add development dependencies with <code class="language-plaintext highlighter-rouge">uv add --dev ipykernel</code>, which will add the following to <code class="language-plaintext highlighter-rouge">pyproject.toml</code>:</p> <div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[dependency-groups]</span>
<span class="py">dev</span> <span class="p">=</span> <span class="p">[</span>
    <span class="py">"ipykernel&gt;</span><span class="p">=</span><span class="mf">6.29</span><span class="err">.</span><span class="mi">5</span><span class="s">",</span><span class="err">
</span><span class="p">]</span>
</code></pre></div></div> <p>This should allow my tool of choice, Visual Studio Code, to find this virtual environment and run Jupyter notebooks on it. However, in my experience, it has been somewhat unreliable: Visual Studio Code only finds the kernel half of the time. A workaround is launching a JupyterLab server instance with <code class="language-plaintext highlighter-rouge">uv run --with jupyter jupyter lab</code> and connecting to it from the editor.</p> <h1 id="training--shipping-the-model">(Training &amp;) Shipping the model</h1> <p>Here comes the actual data science, which I will just skim over. I wrote a simple script to train a convolutional neural network on the MNIST dataset. The script is located in <a href="https://github.com/hclimente/hclimente.github.io/tree/main/assets/python/2025-03-15-python-uv/mnist-classifier/train.py"><code class="language-plaintext highlighter-rouge">train.py</code></a>, and can be run with <code class="language-plaintext highlighter-rouge">uv run train.py</code>. It achieves a 98% classification accuracy on the held-out samples. Neat!</p> <p>Now that we have a working model, let’s see how <code class="language-plaintext highlighter-rouge">uv</code> helps us package the model into a Docker image.</p> <p>First, we need to pick our base image. Astral provides <a href="https://docs.astral.sh/uv/guides/integration/docker/#available-images">multiple pre-built images</a> that include <code class="language-plaintext highlighter-rouge">uv</code> and different versions of Python. Then, deploying the model is as easy as copying the model weights and the prediction script <a href="https://github.com/hclimente/hclimente.github.io/tree/main/assets/python/2025-03-15-python-uv/mnist-classifier/predict.py"><code class="language-plaintext highlighter-rouge">predict.py</code></a> into the image, copying <code class="language-plaintext highlighter-rouge">uv</code> project environment files, and building the environment:</p> <div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> ghcr.io/astral-sh/uv:python3.10-bookworm-slim</span>

<span class="k">RUN </span><span class="nb">mkdir</span> <span class="nt">-p</span> /mnist_classifier/data
<span class="k">WORKDIR</span><span class="s"> /mnist_classifier</span>

<span class="c"># ensure uv.lock isn't modified</span>
<span class="k">ENV</span><span class="s"> UV_LOCKED=1</span>

<span class="c"># copy the minimum required files:</span>
<span class="c">## the uv files needed to recreate the environment</span>
<span class="k">COPY</span><span class="s"> pyproject.toml uv.lock ./</span>
<span class="c">## the prediction script</span>
<span class="k">COPY</span><span class="s"> predict.py .</span>
<span class="c">## the model weights</span>
<span class="k">COPY</span><span class="s"> data/mnist_cnn.pt data/</span>

<span class="c"># recreate the environment</span>
<span class="k">RUN </span>uv <span class="nb">sync</span> <span class="nt">--no-dev</span>

<span class="k">CMD</span><span class="s"> ["uv", "run", "predict.py"]</span>
</code></pre></div></div> <p>The key command here was <code class="language-plaintext highlighter-rouge">uv sync</code>, which will recreate the environment using the exact versions of the packages specified in <code class="language-plaintext highlighter-rouge">uv.lock</code>. This ensures that the environment used to train the model is identical to the one used to share it. Notice that the <code class="language-plaintext highlighter-rouge">--no-dev</code> flag will exclude the packages used for development, like <code class="language-plaintext highlighter-rouge">ipykernel</code>. It’s worth highlighting that the lockfile is cross-platform: I generated it on macOS, but the Docker image is based on Debian.</p> <blockquote> <p>Note: If you use GPU-specific packages, wheels may differ. See <a href="https://docs.astral.sh/uv/guides/integration/pytorch/#installing-pytorch">Astral’s docs</a>.</p> </blockquote> <p>Let’s now build and run the image:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> mnist_classifier <span class="nb">.</span>
docker run mnist_classifier
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SimpleCNN(
  (conv1): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1))
  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))
  (fc1): Linear(in_features=1600, out_features=128, bias=True)
  (fc2): Linear(in_features=128, out_features=10, bias=True)
)
Downloading MNIST test set...
Accuracy of SimpleCNN on the 10,000 test images: 98 %
</code></pre></div></div> <p>Nice!</p> <h1 id="conclusions">Conclusions</h1> <p>We have seen how <code class="language-plaintext highlighter-rouge">uv</code> can be used to manage Python projects, packages and environments. It satisfies my craving for reproducibility, is snappy and has simplified repetitive workflows. I look forward to seeing how it keeps evolving.</p> <h1 id="further-reading">Further reading</h1> <ul> <li><a href="https://www.bitecode.dev/p/a-year-of-uv-pros-cons-and-should">A year of uv: pros, cons, and should you migrate</a></li> </ul>]]></content><author><name></name></author><category term="python"/><category term="coding"/><summary type="html"><![CDATA[A Swiss Army Knife for Python data science]]></summary></entry><entry><title type="html">SHAP values</title><link href="https://hclimente.github.io/blog/shapley/" rel="alternate" type="text/html" title="SHAP values"/><published>2025-04-01T11:59:00+00:00</published><updated>2025-04-01T11:59:00+00:00</updated><id>https://hclimente.github.io/blog/shapley</id><content type="html" xml:base="https://hclimente.github.io/blog/shapley/"><![CDATA[<p>SHAP values are a model-agnostic method to quantify the contribution of any given feature to a model’s prediction. They offer both local (per prediction) and global (overall) interpretations.</p> <h1 id="shapley-values">Shapley values</h1> <p>SHAP values have their roots in game theory, specifically in <strong>Shapley</strong> values. Imagine a group of players collaborating to achieve a payout. The Shapley value is a method to find out how to fairly distribute the total earnings among the players. Or the blame, if the payout was negative!</p> <p>A core concept of Shapley values is <strong>coalitions</strong>: given \(n\) players, a coalition is a subset of the players. Another concept is the <strong>characteristic function</strong>, \(v: 2^N \rightarrow \mathbb{R}\), which returns the total payout for any given coalition (its <em>worth</em>). Here, \(N\) is the set of all players. The last concept is the Shapley value itself, the amount \(\phi_i\) that player \(i\) receives. It is computed as the average of the marginal contributions of player \(i\) to all possible coalitions that do not include it. More formally, for a game \((v, N)\):</p> \[\phi_i(v) = \sum_{S \subseteq N \setminus \{i\}} \frac{|S|!\; (n-|S|-1)!}{n!} (v(S\cup\{i\})-v(S))\] <p>These values satisfy four key properties, which collectively ensure fair attribution: efficiency, symmetry, dummy player, and additivity.</p> <h2 id="efficiency">Efficiency</h2> <p>The grand coalition is the coalition of all players, \(N\). Efficiency means that the sum of all Shapley values equals the value of the grand coalition, i.e., the entire payout is distributed among the players:</p> \[\sum_{i \in N} \phi_i(v) = v(N)\] <h2 id="symmetry">Symmetry</h2> <p>Two players \(i\) and \(j\) are symmetric if their marginal contribution to any coalition not containing either player is the same. That is, if \(v(S \cup \{i\}) = v(S \cup \{j\})\) for any coalition \(S \subseteq N \setminus \{i, j\}\), then symmetry implies that players \(i\) and \(j\) receive the same Shapley value: \(\phi_i(v) = \phi_j(v)\).</p> <h2 id="dummy-player">Dummy player</h2> <p>If a player \(i\) does not change the value of any coalition they join (i.e., \(v(S \cup \{i\}) = v(S)\) for all \(S \subseteq N \setminus \{i\}\)), they are a dummy player. The dummy player property states that such a player’s Shapley value is 0.</p> <h2 id="additivity">Additivity</h2> <p>If two games with characteristic functions \(v_1\) and \(v_2\) are combined into a new game \(v_1 + v_2\) (where \((v_1+v_2)(S) = v_1(S) + v_2(S)\) for any coalition \(S\)), the Shapley values are additive:</p> \[\phi_i(v_1+v_2) = \phi_i(v_1) + \phi_i(v_2)\] <h1 id="shap-values">SHAP values</h1> <p>Machine learning models like linear regression are <em>interpretable</em>, as the model parameters indicate how each input feature contributes to the prediction. However, many complex models like neural networks or random forests are less directly interpretable: their output is a complex, non-linear combination of the input features. SHAP values (<a href="https://arxiv.org/abs/1705.07874">Lundberg and Lee, 2017</a>) provide a framework to quantify the contribution of each feature to a specific prediction for <em>any</em> model. SHAP stands for SHapley Additive exPlanations, highlighting their connection to <em>Shapley</em> values.</p> <p>Intuitively, SHAP values quantify how much each feature’s presence changes the prediction. Some features will have a negative contribution (pushing the prediction lower) and others a positive contribution (pushing the prediction higher). The sum of a feature’s SHAP value and a baseline value (typically the average prediction) approximates the model’s output.</p> <p>To establish the connection to Shapley values, we map the game theory concepts to the machine learning context:</p> <ul> <li>The \(n\) players become \(n\) <em>predictive features</em>.</li> <li>The game is the <em>trained model</em>.</li> <li>The payout for a coalition of features is the <em>model’s prediction</em> when only those features are known.</li> </ul> <p>The Shapley value \(\phi_i\) for feature \(i\) in this context is then calculated as:</p> \[\phi_i = \sum_{S \subseteq F \setminus \{i\}} \frac{|S|!\; (n-|S|-1)!}{n!} (f(\mathbf{x}_{S\cup\{i\}})-f(\mathbf{x}_S))\] <p>where \(\mathbf{x}_S\) is the input datapoint including only the features in \(S\); \(F\) is the set of all features; \(n\) is the total number of features; and \(f_S\) is the model trained only on the features in set \(S\). However, this naïve approach is very computationally intensive, since it’d require retraining \(2^n\) models, one per possible coalition. (See a worked out example <a href="https://www.aidancooper.co.uk/how-shapley-values-work/">here</a>.) SHAP values get around re-training models by approximating the effect of feature subsets using conditional expectations: \(f(\mathbf{x}_S) = \mathbb{E}[f(X) \mid X_S = \mathbf{x}_S]\). In other words, we fix the features that are in \(S\) to the sample values, and average over the predictions when sampling the remaining features from the dataset.</p> <blockquote> <p><strong><em>Simplified</em> features:</strong> We use \(\mathbf{x}\) for the features in the original space \(\chi\), a vector of length \(n\). The SHAP theoretical framework uses a simplified feature vector \(\mathbf{x}' \in \{0,1\}^m\), where \(m\) is the number of simplified features (which can be different from \(n\)). \(x'_j = 1\) indicates that simplified feature \(j\) is “present” in a coalition, and \(x'_j = 0\) indicates it is “absent”. The simplified features are more useful for interpretation. For instance, if \(\mathbf{x}\) represented the individual pixels of an image, \(\mathbf{x}'\) could represent the presence of the “super pixels” that form a cat, grass or the sky. A mapping function \(h_\mathbf{x}: \{0,1\}^m \rightarrow \chi\) links the simplified representation back to the original feature space. For \(\mathbf{x}' = \mathbf{1}\) (all simplified features present), \(h_\mathbf{x}(\mathbf{1}) = \mathbf{x}\). For other \(\mathbf{x}'\), \(h_\mathbf{x}(\mathbf{x}')\) represents the original instance with features corresponding to \(x'_j=0\) appropriately handled (e.g., replaced by baseline values). Note that \(h_\mathbf{x}\) is specific to the instance \(\mathbf{x}\) being explained.</p> </blockquote> <p>That covers the <em>Shapley</em> part of SHAP; let’s now focus on the <em>Additive exPlanation</em> bit. The goal of SHAP is to obtain a local, additive explanation model \(g\) for each prediction \(f(\mathbf{x})\) using the simplified features \(\mathbf{x}'\):</p> \[g(\mathbf{x}') = \phi_0 + \sum_{j = 1}^m \phi_j \mathbf{x}'_j\] <p>where \(\phi_0\) is the expectation over all training examples \(\mathbb{E}[f(X)]\). \(g(\mathbf{x}')\) is a very easy to interpret function that we’ll use to explain \(f(\mathbf{x})\).</p> <p>Since SHAP values are Shapley values, they meet all the properties specified above. But they also satisfy three additional properties that are desirable for model explainers.</p> <h2 id="local-accuracy">Local accuracy</h2> <p>When all simplified features are present (\(\mathbf{x}' = \mathbf{1}\)), the explanation model \(g\) must equal the prediction \(f(\mathbf{x})\):</p> \[f(\mathbf{x}) = g(\mathbf{1}) = \phi_0 + \sum_{j = 1}^m \phi_j\] <h2 id="missingness">Missingness</h2> <p>If a feature is missing, it deserves 0 attribution:</p> \[\mathbf{x}'_j = 0 \implies \phi_j = 0.\] <p>This is a required property to ensure that local accuracy has a unique solution.</p> <h2 id="consistency">Consistency</h2> <p>The consistency ensures that if a model \(f\) changes into another model \(f'\), such that a feature’s contribution doesn’t decrease, the SHAP values do not decrease either. Formally, if</p> \[f'(S) - f'(S \setminus \{i\}) \geq f(S) - f(S \setminus \{i\})\] <p>for all \(S \in F\), then \(\phi_i(f', \mathbf{x}) \geq \phi_i(f, \mathbf{x})\).</p> <h1 id="a-visual-example">A visual example</h1> <p>Let’s understand SHAP values better by looking at an example. I trained a model that uses 10 clinical features (body mass index, cholesterol, age, and a few others) to predict a continuous measure of disease progression one year after baseline. For the purposes of this example, the model is treated as a black box whose input are the 10 features, and the output a real number.</p> <table> <thead> <tr> <th>Age</th> <th>Sex</th> <th>BMI</th> <th>Blood pressure</th> <th>…</th> <th>Target</th> </tr> </thead> <tbody> <tr> <td>0.0380759</td> <td>0.0506801</td> <td>0.0616962</td> <td>0.0218724</td> <td>…</td> <td>151</td> </tr> <tr> <td>-0.00188202</td> <td>-0.0446416</td> <td>-0.0514741</td> <td>-0.0263275</td> <td>…</td> <td>75</td> </tr> <tr> <td>0.0852989</td> <td>0.0506801</td> <td>0.0444512</td> <td>-0.00567042</td> <td>…</td> <td>141</td> </tr> <tr> <td>…</td> <td>…</td> <td>…</td> <td>…</td> <td>…</td> <td>…</td> </tr> </tbody> </table> <blockquote> <p>SHAP values can be computed on the dataset used to train the model (train set) or on a holdout set. Using a larger dataset like the train set might provide a more stable picture of overall feature contributions learned by the model. However, if the train and test data come from different distributions, computing SHAP on the respective sets will likely yield different results.</p> </blockquote> <details><summary>The <code class="language-plaintext highlighter-rouge">shap</code> package</summary> <p>SHAP values are implemented in Python via the <a href="https://shap.readthedocs.io/en/latest/index.html"><code class="language-plaintext highlighter-rouge">shap</code></a> package. While I won’t be showing any code here, you can see the code that generated the figures <a href="/assets/python/2025-04-01-shapley/main.py">here</a>.</p> </details> <p>SHAP values provide <strong>local</strong> explanations, showing the contribution of each feature to a particular prediction. I computed the SHAP values describing the importance of each of the 10 variables for each of the 442 patients. These values represent the estimated impact of each feature on a prediction, relative to the average prediction. We can start by looking at the SHAP values for one patient, using a <em>waterfall</em> plot:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/python/2025-04-01-shapley/img/waterfall_diabetes.webp" sizes="95vw"/> <img src="/assets/python/2025-04-01-shapley/img/waterfall_diabetes.webp" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The waterfall plot shows how the prediction for this patient (186.53) departs from the average prediction over the training set (152.132). The difference (34.398) is the total change attributed by the model. As per the local accuracy property, the SHAP values for this instance sum up to this difference. The features are sorted by the absolute magnitude of their SHAP value. Features colored in pink push the prediction toward higher values, and features in blue toward lower values. We can see that, for this patient, the body mass index was the most important feature, contributing positively by 22.25.</p> <p>We can visualize SHAP values for all 442 patients using a <em>swarmplot</em>:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/python/2025-04-01-shapley/img/beeswarm_diabetes.webp" sizes="95vw"/> <img src="/assets/python/2025-04-01-shapley/img/beeswarm_diabetes.webp" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>In the swarmplot, each point represents the SHAP value for a patient for a specific feature. Features are shown on the y-axis, and their corresponding SHAP values on the x-axis. As in the waterfall plot, features are sorted by their overall importance; and the color of each point indicates the feature value for that patient (pink for high, blue for low).</p> <p>Global explanations can be derived by aggregating the local SHAP values over a dataset. A common global measure is the average absolute SHAP value for each feature:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/python/2025-04-01-shapley/img/global_diabetes.webp" sizes="95vw"/> <img src="/assets/python/2025-04-01-shapley/img/global_diabetes.webp" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Plotting these averages shows which features have the largest impact on the model’s predictions <em>on average</em> across the dataset, providing a global measure of feature importance.</p> <p>Lastly, SHAP values can be used for clustering. While traditional clustering groups data points based on their original feature values, clustering in SHAP space groups points based on how features <em>contribute to the model’s prediction</em>. This can be seen as a form of <em>supervised</em> clustering, as it leverages the model’s output (and indirectly the outcome it was trained on). Clustering SHAP values can reveal groups of instances where different sets of features drive the prediction.</p> <style>.colored-slider{--divider-color:rgba(0,0,0,0.5);--default-handle-color:rgba(0,0,0,0.5);--default-handle-width:clamp(40px,10vw,200px)}</style> <img-comparison-slider class="colored-slider"> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/python/2025-04-01-shapley/img/supervised_pca.webp" sizes="95vw"/> <img src="/assets/python/2025-04-01-shapley/img/supervised_pca.webp" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/python/2025-04-01-shapley/img/unsupervised_pca.webp" sizes="95vw"/> <img src="/assets/python/2025-04-01-shapley/img/unsupervised_pca.webp" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider> <p>Applying PCA to the SHAP values (“supervised PCA”) and the original features (“unsupervised PCA”) for this dataset, we can visualize how instances are grouped.</p> <h1 id="limitations">Limitations</h1> <p>One key limitation of interpreting SHAP values is their behavior with <strong>highly correlated features</strong>. When features are strongly correlated, the model might arbitrarily use one over the others, or distribute importance among them. Consequently, the SHAP values for individual correlated features can become unstable or misleading, making it hard to disentangle their individual contributions.</p> <p>Another point of consideration is <strong>feature interactions</strong>. While the fundamental Shapley value calculation inherently accounts for interactions (by averaging marginal contributions over different coalitions), the basic additive SHAP explanation model \(g(\mathbf{x}') = \phi_0 + \sum \phi_j \mathbf{x}'_j\) does not explicitly separate main effects from interaction effects. The \(\phi_j\) values represent the <em>average</em> contribution of feature \(j\), including its interactive effects, making their interpretation as pure “main effects” challenging when interactions are significant. However, SHAP <a href="https://shap.readthedocs.io/en/latest/example_notebooks/tabular_examples/tree_based_models/Basic%20SHAP%20Interaction%20Value%20Example%20in%20XGBoost.html"><em>can</em> be extended</a> to compute pairwise SHAP interaction values (\(\phi_{ij}\)) which explicitly quantify the interaction between features \(i\) and \(j\).</p> <p>Finally, it’s important to remember that SHAP values explain <em>how the model makes a prediction</em>, not whether the prediction itself is correct. If the model is biased, overfit, or simply wrong for a given instance, the SHAP values will faithfully explain the mechanism behind that incorrect prediction. Measures like permutation feature importance, which rely on model performance metrics after feature perturbation, inherently account for the model’s correctness in their explanation.</p> <h1 id="flavors-of-shap-the-permutation-approximation">Flavors of SHAP: the permutation approximation</h1> <p><a href="#shap-values">Above</a> I described the general approach to compute SHAP values. Unfortunately, it is very computationally intensive: exploring all possible coalitions is equivalent to exploring all \(2^m\) subsets of features. For that reason, different flavors of SHAP values have been proposed to make computations more efficient. I describe below the <strong>permutation approximation</strong>, a model-agnostic method to compute SHAP values \(\phi_i\). However, there are others specialized in specific model types, like <a href="https://shap.readthedocs.io/en/latest/generated/shap.TreeExplainer.html">Tree SHAP</a> for tree-based models (e.g., random forests, gradient boosting) and <a href="https://shap.readthedocs.io/en/latest/generated/shap.DeepExplainer.html">Deep SHAP</a> for deep learning models.</p> <p>The permutation approximation approximates SHAP values by estimating the expected marginal contribution of each feature over many random permutations of the features. Let’s study the permutation approximation through a worked out example. We aim to explain a prediction \(f(\mathbf{x}_0)\). We have at our disposal a background dataset \(X_\text{bg}\), e.g., the whole training set, which we will use for sampling. For the sake of the example, our model only considers four (simplified) features: \(\mathbf{x}_0 = [x_{\text{age}}, x_\text{sex}, x_\text{BMI}, x_\text{BP}]\).</p> <p>For each feature \(i\) that we want to explain:</p> <ol> <li>Initializing a list to store the marginal contribution of each feature. In this example, I will focus on the contribution of the first feature, \(x_\text{age}\), so I will call this list just \(\text{list}_\text{age}\).</li> <li>For \(K\) iterations: <ol> <li>A random ordering of the features is produced, e.g., \((\text{BP}, \text{age}, \text{BMI}, \text{sex})\), and a random sample \(\mathbf{z}\) is sampled from the background dataset \(X_\text{bg}\).</li> <li>Create two synthetic examples: - \(\mathbf{x}_1 = (x_\text{BP}, x_\text{age}, z_\text{BMI}, z_\text{sex})\) - \(\mathbf{x}_2 = (x_\text{BP}, z_\text{age}, z_\text{BMI}, z_\text{sex})\) Note that the only difference between the two examples is the value of the age feature.</li> <li>Compute the marginal contribution of the age feature as \(\delta = f(\mathbf{x}_1) - f(\mathbf{x}_2)\).</li> <li>Append the marginal contribution to \(\text{list}_\text{age}\).</li> </ol> </li> <li>Approximate the SHAP value as the average marginal contribution: \(\phi_\text{age} \cong \frac{1}{K} \sum_i \delta_{i}.\)</li> </ol> <h1 id="further-reading">Further reading</h1> <ul> <li><a href="https://christophm.github.io/interpretable-ml-book/shapley.html">Interpretable Machine Learning: Shapley values</a></li> <li><a href="https://christophm.github.io/interpretable-ml-book/shap.html">Interpretable Machine Learning: SHAP</a></li> <li><a href="https://shap.readthedocs.io">Python’s <code class="language-plaintext highlighter-rouge">shap</code> documentation</a></li> <li><a href="https://www.aidancooper.co.uk/supervised-clustering-shap-values/">Supervised Clustering: How to Use SHAP Values for Better Cluster Analysis</a></li> <li><a href="https://davidrosenberg.github.io/ttml2021fall/interpretable-ml/5.Shapley-LIME-SHAP.pdf">Shapley Values, LIME, and SHAP</a></li> </ul>]]></content><author><name></name></author><category term="feature_selection"/><category term="machine_learning"/><category term="feature_importance"/><summary type="html"><![CDATA[A model-agnostic framework for explaining predictions]]></summary></entry><entry><title type="html">Knockoffs</title><link href="https://hclimente.github.io/blog/kernel-knockoffs/" rel="alternate" type="text/html" title="Knockoffs"/><published>2025-02-18T12:00:00+00:00</published><updated>2025-02-18T12:00:00+00:00</updated><id>https://hclimente.github.io/blog/kernel-knockoffs</id><content type="html" xml:base="https://hclimente.github.io/blog/kernel-knockoffs/"><![CDATA[<p>In many scientific applications, the goal is to discover which features are truly associated with an outcome. The <a href="https://en.wikipedia.org/wiki/False_discovery_rate">false discovery rate</a> (FDR) is defined as the expected proportion of false positives among the selected features. Controlling the FDR is less conservative than controlling the <a href="https://en.wikipedia.org/wiki/Family-wise_error_rate">family-wise error rate</a>, often leading to more discoveries.</p> <p>When dealing with statistical tests, Benjamini–Hochberg and Benjamini–Yekutieli are common procedures to keep the FDR below a level \(\alpha\). However, such strategies rely on certain assumptions; for instance, that P-values are well-calibrated or that tests have certain correlation structures. If these are not met, the statistical guarantees on FDR control are also out the window. Furthermore, they require having P-values to work with; in many cases we just want to control the FDR of selected features, but do not have a well-characterized null hypothesis. For instance, given a set of active features in Lasso, how can we make sure the fraction of non-explanatory features is controlled? In such cases, <em>knockoffs</em> can be helpful.</p> <h1 id="knockoffs">Knockoffs</h1> <p>The <strong>knockoff</strong> filter is a procedure to perform feature selection while keeping the FDR controlled. Given an outcome \(\mathbf{Y}\) and a feature matrix \(X\), the goal is to select a subset of features \(X_S\) such that</p> \[Y \perp X_{-S} \mid X_S\] <p>The procedure computes and leverages a new matrix \(\tilde{X}\), with the same dimensions as \(X\), containing “knockoff” copies of the original features. Each original variable \(\mathbf{X_i}\) has its own knockoff \(\mathbf{\tilde{X}_i}\). These knockoffs are engineered to mimic the correlation structure of the original features: for any \(i \neq j\), \(\rho(\mathbf{X_i}, \mathbf{X_j}) = \rho(\mathbf{X_i}, \mathbf{\tilde{X}_j}) = \rho(\mathbf{\tilde{X}_i}, \mathbf{\tilde{X}_j})\). Also, knockoffs are created without using \(\mathbf{Y}\). Hence, conditional on \(X\), \(Y\) is independent of \(\tilde{X}\) conditioned on \(X\).</p> <p>There are two paradigms to model knockoffs: Model-X and Fixed-X.</p> <p>The <strong>Model-X</strong> paradigm assumes that the explanatory variables are random variables with a known joint distribution. Although theoretically appealing, this assumption can be impractical for real-world data, since we do not know the data generating function \(F_X\). For that reason, I will ignore it for the remainder of this discussion.</p> <p>The <strong>Fixed-X</strong> paradigm makes no assumptions on the distribution of the explanatory variables. Instead, they can be treated as fixed quantities. This makes it more applicable in practice. However, it imposes three important restrictions:</p> <ul> <li> <table> <tbody> <tr> <td>$$F_{Y</td> <td>X}$$ must be linear and homoscedastic</td> </tr> </tbody> </table> </li> <li>The problem must be low dimensional (number of samples \(&gt;\) number of features)</li> <li>The statistics \(D(X_i, Y)\) and \(D(\tilde{X}_i, Y)\) must satisfy additional requirements (see references)</li> </ul> <h1 id="the-knockoff-procedure">The knockoff procedure</h1> <p>Intuitively, by comparing the association measure computed for each original feature against its knockoff, one can determine which features provide true signals. Specifically, the knockoff-based feature selection consists of four steps.</p> <h2 id="1-generate-knockoffs">1. Generate knockoffs</h2> <p>Create synthetic copies of the features that retain the original correlation structure without any outcome information. An obvious question is how to synthesize such knockoff copies.</p> <h2 id="2-compute-association-measures">2. Compute association measures</h2> <p>For each feature, calculate the association measure \(D(\mathbf{Y}, \mathbf{X_k})\) and its counterpart \(D(\mathbf{Y}, \tilde{\mathbf{X}_k})\) on the knockoff.</p> <p>Kernel-based measures are powerful tools for detecting complex, non-linear dependencies:</p> <ul> <li><strong>HSIC (Hilbert-Schmidt Independence Criterion):</strong> Computes the covariance between kernel-transformed versions of the feature and the outcome, capturing a broad range of dependency structures.</li> <li><strong>Conditional MMD (cMMD):</strong> Assesses the difference between the conditional distribution of a feature given the outcome and its marginal distribution. This measure is particularly useful when dealing with categorical outcomes.</li> <li><strong>TR Measure:</strong> A linear combination of Kendall’s τ and Spearman’s ρ, designed to effectively capture associations in both continuous and discrete data.</li> </ul> <p>These measures satisfy the sure independence screening property under bounded kernel conditions—meaning that, with high probability, the truly active features are recovered when a proper threshold is used.</p> <blockquote> <p>A potential limitation of kernel knockoffs is its sometimes overly conservative nature. To keep the FDR low, the procedure may end up selecting very few—or even no—features. This suggests that the chosen association measure might not be sufficiently sensitive. One possible remedy is to explore alternative kernel choices or optimize feature screening steps before applying knockoff filtering.</p> </blockquote> <h2 id="3-compute-the-knockoff-statistic">3. Compute the knockoff statistic</h2> <p>Define the statistic as \(w_k = D(Y, X_k) - D(Y, \tilde{X}_k)\). A larger \(w_k\) indicates stronger evidence that the original feature is associated with the outcome.</p> <h2 id="4-select-a-threshold-and-select-features">4. Select a threshold and select features</h2> <p>Identify the smallest threshold \(t\) such that \(\frac{\#\{w_k \le -t\}}{\#\{w_k \ge t\}} \le \alpha\) where \(\alpha\) is the desired FDR level. Retain all features with \(w_k \ge t\).</p> <h1 id="screening-in-high-dimensions">Screening in High Dimensions</h1> <p>A notable challenge arises when the number of features \(p\) is large compared to the sample size \(n\) (i.e., \(2p&gt;n\)). In such high-dimensional settings, constructing knockoffs directly is infeasible. A common workaround is to:</p> <ul> <li>Pre-screen Features: Use a subset of the data to rank and reduce the feature set.</li> <li>Apply the knockoff filter: With the reduced set of features, generate knockoffs using the remaining samples (ensuring \(m &gt; 2d\), where \(d\) is the number of features after screening).</li> </ul> <p>This two-step approach helps maintain statistical power while ensuring robust FDR control.</p> <h1 id="references">References</h1> <ul> <li><a href="https://web.stanford.edu/group/candes/knockoffs/">Variable Selection with Knockoffs</a></li> <li><a href="https://proceedings.mlr.press/v151/poignard22a.html">B. Poignard, P. J. Naylor, H. Climente-González, M. Yamada, in International Conference on Artificial Intelligence and Statistics (PMLR, 2022), pp. 1935–1974.</a></li> </ul>]]></content><author><name></name></author><category term="fdr"/><category term="knockoffs"/><category term="feature_selection"/><summary type="html"><![CDATA[FDR-controlled feature selection]]></summary></entry><entry><title type="html">Random walks and Markov chains</title><link href="https://hclimente.github.io/blog/graphs-random-walks/" rel="alternate" type="text/html" title="Random walks and Markov chains"/><published>2025-01-27T11:59:00+00:00</published><updated>2025-01-27T11:59:00+00:00</updated><id>https://hclimente.github.io/blog/graphs-random-walks</id><content type="html" xml:base="https://hclimente.github.io/blog/graphs-random-walks/"><![CDATA[<h1 id="random-walk">Random walk</h1> <p>A <strong>random walk (RW)</strong> is a <a href="https://en.wikipedia.org/wiki/Stochastic_process">stochastic</a>, discrete process. At every time step a walker, located in one of the graph’s vertices, picks one of its neighbors at random and moves to it. Often the transition probability between vertices is represented by the <strong>transition</strong> matrix \(P\), a normalized version of the <a href="/blog/graphs-linear-algebra/#adjacency-matrix">adjacency</a> in which the weights of all outbound edges add up to 1:</p> \[P = D^{-1} A\] <p>Note that \(P\) corresponds to a <a href="#markov-chains">row stochastic matrix</a>. The outcome of a single random walk is a <a href="/blog/graphs-glossary/#walk">walk</a> of length \(t\), where \(t\) is the number of steps. Let’s see how a random walk starting at vertex \(i\) plays out:</p> <ul> <li>At step 0, \(\mathbf{\pi}_0 = (0, 0, \cdots, 1, \cdots, 0)\). That is, \(\pi_0\) is an \(n\)-dimensional row vector that is \(0\) almost everywhere, with a \(1\) at component \(i\).</li> <li>At step 1, \(\mathbf{\pi}_{1} = \mathbf{\pi}_0 P\)</li> <li>At step 2, \(\mathbf{\pi}_{2} = \mathbf{\pi}_1 P = (\mathbf{\pi}_0 P) P = \mathbf{\pi}_0 P^2\)</li> <li>At step 3, \(\mathbf{\pi}_{3} = \mathbf{\pi}_2 P = (\mathbf{\pi}_0 P^2) P = \mathbf{\pi}_0 P^3\)</li> <li>…</li> <li>At step \(t\), \(\mathbf{\pi}_{t} = \mathbf{\pi}_0 P^t\)</li> </ul> <p>\(\pi_t\) is an \(n\)-dimensional row vector \(\mathbf{\pi}_t\) in which \(\pi_{tj}\) represents the probability of the walker starting at vertex \(i\) and being on vertex $j$ at time $t$.</p> <p>We might be interested in what happens if we let the random walk run indefinitely:</p> \[\lim_{t \to \infty} \mathbf{\pi}_{t} = \mathbf{\pi}_0 P^t\] <p>When taking powers of a matrix, it is useful to use its <a href="https://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix">eigendecomposition</a>. After computing the eigenvectors (\(\mathbf{u}_1, \cdots, \mathbf{u}_n\)) and the eigenvalues (\(\lambda_1, \cdots, \lambda_n\)) of \(P\), we first expand \(\mathbf{\pi}_0\) in the eigenbasis:</p> \[\mathbf{\pi}_0 = c_1 \mathbf{u}_1 + c_2 \mathbf{u}_2 + \cdots + c_n \mathbf{u}_n\] <p>Then, for an arbitrary step \(t\):</p> \[\begin{multline*} \mathbf{\pi}_{t} = \mathbf{\pi}_0 P^t \\ = (c_1 \mathbf{u}_1 + \cdots + c_n \mathbf{u}_n) P^t \\ = c_1 \mathbf{u}_1 P^t + \cdots + c_n \mathbf{u}_n P^t \\ = c_1 \lambda^t_1 \mathbf{u}_1 + \cdots + c_n \lambda^t_n \mathbf{u}_n \end{multline*}\] <p>The eigenvalues of a stochastic matrix are always less than or equal to 1 in absolute value. When the random walk is <em>ergodic</em> (see below), \(P\) has an eigenvalue of 1 with an eigenvector \(\pi\) such that:</p> \[\pi_i = \frac {d_i} {\sum_j d_j}.\] <details><summary>Proof</summary> <p>The degree row-vector \(\mathbf{d} = ({d_1}, \cdots, d_n )\) is a left eigenvector of \(P\):</p> \[\mathbf{d} P = \mathbf{d} D^{-1} A = \mathbf{1} A = \mathbf{d}\] <p>where \(\mathbf{1}\) represents the row vector of all ones. That is, \(\mathbf{d}\) is an eigenvector with eigenvalue 1 and non-negative entries. In order to transform it into a valid probability distribution, we need to make sure that \(\sum_i \pi_i = 1\):</p> \[\pi = \frac 1 {\sum_i d_i} \mathbf{d}\] </details> <p>This is the stationary distribution of the random walk. It formalizes the intuitive result that high <a href="/blog/graph-properties/#degree">degree</a> vertices are more likely to be visited. If the graph is <a href="/blog/graphs-glossary/#regular">regular</a>, the stationary distribution is uniform. Note that this is a property of the matrix, and not of \(\pi_0\). This implies that the starting vertex is not important in the long run: if the random walk is allowed to run indefinitely, the probability of ending up in each vertex will converge to \(\pi\).</p> <blockquote> <p><strong>Ergodicity and <em>lazy</em> random walks:</strong> A unique stationary distribution does not always exists. A random walk is <em>ergodic</em> if a stationary distribution exists and is the same for any \(\pi_0\). For the random walk to be ergodic, the graph needs to be connected and non <a href="/blog/graphs-glossary/#bipartite-graph">bipartite</a>. If the graph has multiple components, starting in different components will produce different stationary distributions. If the graph is bipartite, at step \(t\) the walker will be on one side or another, depending on the initial vertex and the parity of \(t\). Bipartite graphs have a ergodic <a href="https://people.orie.cornell.edu/dpw/orie6334/Fall2016/lecture11.pdf"><em>lazy</em> random walk</a>, in which the walker has a probability \(\frac 1 2\) of remaining at the current vertex and a probability \(\frac 1 2\) of leaving it.</p> </blockquote> <details><summary>Connection to the Laplacian</summary> <p>The <a href="/blog/graphs-linear-algebra/#normalized-laplacian-matrices">Laplacian</a> and the transition matrices are deeply related:</p> \[L_{rw} = D^{-1}L = D^{-1}(D - A) = I - P\] <p>In fact, their eigenvectors and eigenvalues are connected. If \(\mathbf{u}\) is an eigenvector of \(P\), with eigenvalue \(\lambda\):</p> \[\mathbf{u} L_{rw} = \mathbf{u} (I - P) = \mathbf{u} - \mathbf{u} P = (1 - \lambda) \mathbf{u}\] <p>That is, \(P\) and \(L_{rw}\) have the same eigenvectors, and the eigenvalues are related as \(\lambda_i(L_{rw}) = 1 - \lambda_i(P)\). Since the <a href="/blog/graphs-linear-algebra/#connectivity-of-the-graph">smallest eigenvalue of \(L_{rw}\)</a> is 0, corresponding to the eigenvector \(\mathbf{1}\), \(P\) has an eigenvalue of \(1\) corresponding to that same eigenvector.</p> </details> <p>There are several remarks we can do:</p> <ul> <li>This result holds regardless of what the starting vertex is. In fact, \(\pi_0\) could be a probability distribution over the vertices.</li> <li>The <em>speed</em> at which the distribution converges depends on the eigenvalues of \(P\). Specifically, if \(\lambda_2\) is close to 1, the convergence will be slow.</li> </ul> <h1 id="random-walk-with-restart">Random walk with restart</h1> <p>In the <strong>random walk with restart (RWR)</strong>, the walker can return to its root vertex with a restart probability \(r \in [0, 1]\):</p> \[\mathbf{\pi}_{t+1} = r \mathbf{\pi}_0 + (1 - r) P \mathbf{\pi}_t\] <p>where \(\mathbf{\pi}_0\) represents the probability of starting at each vertex. If \(r = 0\), the walker will never be teleported back to the root, and a RW is equivalent to a RWR. If \(r = 1\), the walker will not be allowed to move out of the root, and \(\mathbf{\pi}_t = \mathbf{\pi}_0\). However, for certain values of $r$, the walker is allowed to explore the root’s neighborhood before teleporting back. If the root is part of a <a href="/blog/graphs-glossary/#module">module</a>, the walk will mostly happen within that module. If the root is very central, the walker will explore many parts of the network.</p> <p>Importantly, the RWR also has a stationary distribution \(\pi\):</p> \[\lim_{t \to \infty} \mathbf{\pi}_{t} = \pi\] <h1 id="markov-chains">Markov chains</h1> <p>A <strong>Markov chain</strong> is a sequence of events in which the probability of each event only depends on the state attained in the previous event. A random walk is a Markov chain: the probability of visiting a vertex depends only on the current vertex’s neighbors and the corresponding transition probabilities. We can describe some of the properties of a Markov chain by describing the underlying graph:</p> <ul> <li><em>Time reversibility</em></li> <li><em>Symmetry</em>: a Markov chain is symmetric when the underlying graph is <a href="/blog/graphs-glossary/#regular">regular</a>.</li> </ul> <p>In the context of Markov chains, the transition matrix \(P\) is known as the <strong>right stochastic matrix</strong>.</p> <details><summary>Types of stochastic matrices</summary> <ul> <li><strong><em>Row/right</em> stochastic matrix</strong>: square matrix with non-negative entries where each row sums to \(1\).</li> <li><strong><em>Column/left</em> stochastic matrix</strong>: square matrix with non-negative entries where each column sums to \(1\).</li> <li><strong><em>Doubly</em> stochastic matrix</strong>: square matrix with non-negative entries where each row and column sum to \(1\).</li> </ul> </details> <h1 id="further-reading">Further reading</h1> <ul> <li><a href="https://www.youtube.com/watch?v=8XJes6XFjxM">Full title: The Unreasonable Effectiveness of Spectral Graph Theory: A Confluence of Algorithms, Geometry, and Physics</a></li> </ul>]]></content><author><name></name></author><category term="graphs"/><category term="random_walks"/><category term="linear_algebra"/><summary type="html"><![CDATA[PageRank, MCMC, and others]]></summary></entry><entry><title type="html">Graphs and Linear Algebra</title><link href="https://hclimente.github.io/blog/graphs-linear-algebra/" rel="alternate" type="text/html" title="Graphs and Linear Algebra"/><published>2025-01-25T11:59:00+00:00</published><updated>2025-01-25T11:59:00+00:00</updated><id>https://hclimente.github.io/blog/graphs-linear-algebra</id><content type="html" xml:base="https://hclimente.github.io/blog/graphs-linear-algebra/"><![CDATA[<p>In this article I discuss matrices associated to graphs. As we will see, a graph can be represented as a matrix without any information loss. Hence, the properties of these matrices describe <a href="/blog/graphs-basics/#properties-of-a-graph">properties of the underlying graph</a>.</p> <h1 id="matrices-associated-to-graphs">Matrices associated to graphs</h1> <p>A graph \(G = (V, E)\) s.t. \(V = \{v_1, \dots, v_n\}\) and \(E = \{e_1, \dots, e_m \}\) has several important associated matrices. For convenience, I often refer to vertex \(v_i\) simply by its index (\(i\)), and to an edge by the vertices it links (e.g., \(ij\)).</p> <p>I will show examples on the following graph, named \(G_1\):</p> <pre><code class="language-mermaid">---
config:
  layout: elk
  look: handDrawn
---
graph LR
    vertex_1((1))
    vertex_2((2))
    vertex_3((3))
    vertex_4((4))

    vertex_1 === vertex_2
    vertex_1 === vertex_3
    vertex_1 === vertex_4
    vertex_2 === vertex_3
</code></pre> <h2 id="degree-matrix">Degree matrix</h2> <p><a href="/blog/graphs-basics/#degree">Vertex degree</a> is ised to define the <strong>degree</strong> matrix \(D\) is a diagonal \(n \times n\) matrix such that \(D_{ii} = \deg i\), and 0 elsewhere. For instance, for \(G_1\):</p> \[\text{D}(G_1) = \begin{bmatrix} 3 &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 2 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 2 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1 \\ \end{bmatrix}\] <h2 id="incidence-matrix">Incidence matrix</h2> <p><a href="/blog/graphs-glossary/#incidence">Incidence</a> is used to define the <strong>incidence</strong> matrix \(Q\), a \(n \times m\) matrix such that \(Q_{ij}\) equals:</p> <ul> <li>If \(G\) is <em>directed</em>: <ul> <li>\(0\) if vertex \(i\) and edge \(e_j\) are not incident</li> <li>\(1\) if edge \(e_j\) originates at vertex \(i\)</li> <li>\(-1\) if edge \(e_j\) terminates at vertex \(i\)</li> </ul> </li> <li>If \(G\) is <em>undirected</em>: <ul> <li>If \(Q\) is <em>unoriented</em>: <ul> <li>\(0\) if vertex \(i\) and edge \(e_j\) are not incident</li> <li>\(1\) otherwise</li> </ul> </li> <li>If \(Q\) is <em>oriented</em>: we pick an <a href="/blog/graphs-glossary/#orientation">orientation</a> of the graph, and use the incidence matrix of the resulting directed graph.</li> </ul> </li> </ul> <h2 id="adjacency-matrix">Adjacency matrix</h2> <p><a href="/blog/graphs-glossary/#adjacency">Adjacency</a> is used to define the <strong>adjacency</strong> matrix \(A\), a matrix \(n \times n\) such that the \(A_{ij}\) equals:</p> <ul> <li>\(0\) if vertices \(i\) and \(j\) are not adjacent (note that in simple graphs vertices are not self-adjacent)</li> <li>\(1\) otherwise</li> </ul> <p>For \(G_1\):</p> \[A = \begin{bmatrix} 0 &amp; 1 &amp; 1 &amp; 1 \\ 1 &amp; 0 &amp; 1 &amp; 0 \\ 1 &amp; 1 &amp; 0 &amp; 0 \\ 1 &amp; 0 &amp; 0 &amp; 0 \\ \end{bmatrix}\] <p>The adjacency matrix relates to the concept of <a href="/blog/graphs-glossary/#path">paths</a> in an unweighted graph: \((A^k)_{ij}\) represents the number of paths of length \(k\) from vertex \(i\) to vertex \(j\). In a weighted graph, it represents the sum of products of weights. For instance, if edge weights represent transition probabilities, \((A^k)_{ij}\) represents the probability of starting a <a href="/blog/graphs-random-walks/">walk</a> at node \(i\) and ending at node \(j\) after \(k\) steps.</p> <h2 id="laplacian-matrix">Laplacian matrix</h2> <p>The <strong>Laplacian</strong> matrix \(L\) is a \(n \times n\) matrix such that the \(L_{ij}\) equals::</p> <ul> <li>For \(i \neq j\): <ul> <li>\(0\) if vertices \(i\) and \(j\) are not adjacent</li> <li>\(-1\) otherwise</li> </ul> </li> <li>For \(i = j\), the degree of \(i\).</li> </ul> <p>More concisely, \(L = D - A\). Or, given any oriented incidence matrix \(Q(G)\), \(L = QQ^T\).</p> <p>For \(G_1\):</p> \[L = D - A = \begin{bmatrix} 3 &amp; -1 &amp; -1 &amp; -1 \\ -1 &amp; 2 &amp; -1 &amp; 0 \\ -1 &amp; -1 &amp; 2 &amp; 0 \\ -1 &amp; 0 &amp; 0 &amp; 1 \\ \end{bmatrix}\] <p>The Laplacian relates to the connectedness of a graph, giving rise to <a href="#spectral-graph-theory">spectral graph theory</a>. It also is connected to <a href="/blog/graphs-glossary/#flow">flows</a>. The diagonal entries represent the total outflow capacity from a vertex, while off-diagonal entries encode pairwise connection strengths.</p> <h2 id="normalized-laplacian-matrices">Normalized Laplacian matrices</h2> <p>The presence of <a href="/blog/graphs-glossary/#hub">hubs</a> results in large diagonal entries in the Laplacian. There are normalized versions of the Laplacian that downweigh such vertices by dividing the entries by the vertex degree.</p> <p>The <strong>symmetrically</strong> normalized Laplacian \(L_\text{sym}\) is a symmetric matrix derived as follows:</p> \[L_\text{sym} = D^{-1/2}LD^{-1/2}\] <p>The <strong>random walk</strong> normalized Laplacian \(L_\text{rw}\) is a matrix closely related to <a href="/blog/graphs-random-walks/">random walks</a> that is derived as follows:</p> \[L_\text{rw} = D^{-1}L\] <h1 id="spectral-graph-theory">Spectral graph theory</h1> <p><strong>Spectral graph theory</strong> studies how the eigenvalues and eigenvectors of a graph’s associated matrices relate to its properties. Looking more closely at two of the matrices described above, we can see they have interesting properties:</p> <ul> <li>If \(G\) is undirected, \(A\) is both real and symmetric. Hence, it is diagonalizable and has only <em>real</em> values.</li> <li>Since for an undirected graph both \(D\) and \(A\) are symmetric, \(L\) is also real and symmetric. In fact, \(L\) is <strong>positive semi-definite</strong>. This implies that \(L\)’s eigenvalues are not only real, but also <em>non-negative</em>.</li> </ul> <p>Spectral graph theory often focuses on studying the eigenvalues of the Laplacian.</p> <h2 id="connectivity-of-the-graph">Connectivity of the graph</h2> <p>The eigenvectors of \(L\) are closely related to the connectivity of its associated graph.</p> <p>A simple, but ultimately insightful property of \(L\) is that, for an undirected graph, the sum over the rows or the columns equals 0. In other words, multiplying \(L\) by an all-ones vector \(\mathbf{1}\) results in the zero vector. This tells us that \(L\) has an eigenvalue of 0, corresponding to the eigenvector \(\mathbf{1}\). Separately, linear algebra tells us that since \(L\) is real and symmetric, it has <em>real</em> eigenvalues and <em>orthogonal</em> eigenvectors. And since \(L\) is positive semi-definite, its eigenvalues are <em>non-negative</em>. As we have just seen, the <a href="/blog/graphs-glossary/#first-k-eigenvectors">first eigenvalue</a>, \(\lambda_1\), of \(L\) is 0, corresponding to the \(\mathbf{1}\) eigenvector. If a vector has multiple <a href="/blog/graphs-glossary/#component">components</a>, \(L\) is block diagonal. This makes it easy to see that the indicator vectors, representing the membership of each vertex to one of the components, are eigenvectors with an eigenvalue of 0. This highlights another important property of the Laplacian: given an undirected graph, the multiplicity of the eigenvalue 0 of \(L\) equals the number of <a href="/blog/graphs-glossary/#component">components</a>. Conversely, for a <a href="/blog/graphs-glossary/#connected-graph">connected</a> graph, \(\lambda_2 &gt; 0\). (The second smallest eigenvalue is sometimes called the Fiedler eigenvalue.)</p> <p>More generally, less <em>smooth</em> eigenvectors (i.e., those in which consecutive elements change sharply) indicate a less connected. Equivalently, smaller eigenvalues correspond to smoother eigenvectors, and hence to better connected graphs.</p> <h2 id="spectral-clustering">Spectral clustering</h2> <p>The goal of <strong>spectral clustering</strong> is finding a partition of the graph into \(k\) groups such that the are densely/strongly connected with each other, and sparsely/weakly connected to the others. (If we consider <a href="/blog/graphs-random-walks/">random walks</a>, spectral clustering seeks a partition of the graph such that a random walker tends to stay within each partition, rarely shifting between disjoint sets.) An spectral clustering algorithm, in which seek to find <em>k</em> clusters, looks as follows:</p> <pre><code class="language-pseudocode">\begin{algorithm}
\caption{Spectral Clustering}
\begin{algorithmic}[1]
\PROCEDURE{GraphSpectralClustering}{$$A, k$$}
    \STATE $$n \gets \text{number of nodes (rows in A)}$$

    \STATE Compute degree matrix $$D$$ where $$D[i,i] = \sum_{j=1}^n A[i,j]$$
    \STATE $$D_{\text{sqrt-inv}} \gets \text{diag}(1/\sqrt{D[i,i]})$$
    \STATE $$L_{\text{sym}} \gets I - D_{\text{sqrt-inv}} A D_{\text{sqrt-inv}}$$ \COMMENT{Symmetric normalized Laplacian}

    \STATE Compute first $$k$$ eigenvectors $$u_1, \ldots, u_k$$ of $$L_{\text{sym}}$$
    \STATE Form matrix $$U \in \mathbb{R}^{n \times k}$$ with columns $$u_1, \ldots, u_k$$

    \FOR{$$i = 1$$ \TO $$n$$}
        \STATE $$U[i] \gets U[i] / \|U[i]\|$$ \COMMENT{Row normalization}
    \ENDFOR

    \STATE $$\text{labels} \gets \text{KMeans}(U, k)$$ \COMMENT{Cluster embedded nodes}
    \RETURN $$\text{labels}$$
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre> <blockquote> <p><strong>Note:</strong> spectral clustering is often applied as a clustering technique on datasets. The aim is to divide the observation into \(k\) groups based on their pairwise similarities. In that case, the first step consists on obtaining the graph. It will be a complete weighted graph in which the vertices are the different observations and the edges are weighted according to the similarity between each pair of vertices, as measured by an arbitrary function.</p> </blockquote> <h1 id="further-reading">Further reading</h1> <ul> <li><a href="https://people.csail.mit.edu/dsontag/courses/ml14/notes/Luxburg07_tutorial_spectral_clustering.pdf">A Tutorial on Spectral Clustering</a></li> <li><a href="https://mathweb.ucsd.edu/~fan/talks/mlg.pdf">Four graph partitioning algorithms</a></li> <li><a href="https://www.youtube.com/watch?v=uTUVhsxdGS8">Spectral Graph Theory For Dummies</a></li> <li><a href="https://www.youtube.com/watch?v=8XJes6XFjxM">Full title: The Unreasonable Effectiveness of Spectral Graph Theory: A Confluence of Algorithms, Geometry, and Physics</a></li> </ul>]]></content><author><name></name></author><category term="graphs"/><category term="linear_algebra"/><summary type="html"><![CDATA[Matrices associated to graphs and their properties]]></summary></entry><entry><title type="html">Properties of Graphs</title><link href="https://hclimente.github.io/blog/graph-properties/" rel="alternate" type="text/html" title="Properties of Graphs"/><published>2025-01-24T11:59:00+00:00</published><updated>2025-01-24T11:59:00+00:00</updated><id>https://hclimente.github.io/blog/graph-properties</id><content type="html" xml:base="https://hclimente.github.io/blog/graph-properties/"><![CDATA[<p>At the most fundamental level, graphs are just entities and connections between them. Yet, the network topology gives rise to emergent properties. For instance, how information flows through a social network is partly a function who posts the message and how they are connected to the rest of the network, with their immediate connections being likely more important. In this section, I review three levels at which networks operate: <a href="#local-properties">local</a>, <a href="#mesoscale-properties">mesoscale</a> and <a href="#global-properties">global</a>. They refer, respectively, to properties of the nodes, properties of parts of the network and properties of the whole network.</p> <h1 id="local-properties">Local properties</h1> <h2 id="degree">Degree</h2> <p>In an undirected network, the <strong>degree</strong> of a vertex \(u\) (\(\deg u\)) refers to the number of edges that are incident on \(u\). In a directed network, this concept is split between <em>indegree</em> ([\(\deg^- u\)], the number of edges that have \(u\) as their destination) and <em>outdegree</em> ([\(\deg^+ u\)], number of edges that have \(u\) as their source). Weighted graphs extend this concept to <em>weighted</em> degree, in which \(\deg u = \sum_{i} w(e_{ui})\).</p> <h2 id="local-clustering-coefficient">Local clustering coefficient</h2> <p>The <strong>(local) clustering coefficient</strong> <em>of a vertex</em> measures the probability that its <a href="/blog/graphs-glossary/#neighborhood">neighbors</a> are connected. It is computed as the ratio between number of <a href="/blog/graphs-glossary/#triangle-graph">triangles</a> involving a vertex, and the number of <a href="/blog/graphs-glossary/#triplet">triplets</a> involving that same vertex.</p> <p><a href="https://r.igraph.org/reference/transitivity.html">Often</a>, the clustering coefficient of a directed graph is computed without considering the direction of the edges.</p> <h1 id="mesoscale-properties">Mesoscale properties</h1> <h2 id="modularity">Modularity</h2> <p>The <strong>modularity</strong> measures how well a graph can be divided into <a href="/blog/graphs-glossary/#modules">modules</a>. Given a partition of a graph into \(k\) modules, the modularity \(Q\) is computed as</p> \[Q = \sum_{i=1}^k (e_{ii} - {a_i^2})\] <p>where \(e_{ii} = \frac {\| \{\{u, v\} \mid u \in V_i, v \in V_i, \{u, v\} \in E \} \|} {\|E\|}\),\(a*i = \frac {\| \{\{u, v\} \mid u \in V_i, \{u, v\} \in E \} \|} {\|E\|}\) and \(V_i\) is the set of vertices in module \(i\). \(e*{ii}\) is the fraction of edges within module \(i\) and \(a_i\) is the fraction of edges incident with one vertex in module \(i\). \(Q\) will be large when the fraction of edges within the module is much larger than expected by chance.</p> <h2 id="within-module-degree">Within-module degree</h2> <p>The <strong>within-module degree</strong> of a vertex is the module version of the <a href="#degree">degree</a>. It is often normalized as a z-score; the z-score for node \(i\), mapped to module \(k\):</p> \[Z_i = \frac {\kappa_i - \bar \kappa_k} {\sigma_{\kappa_k}}\] <p>where \(\kappa_i\) is within-module degree (the number of edges between \(i\) and other vertices in module \(k\)); \(\bar \kappa_k\) is the average within-module degree; and \(\sigma_{\kappa_k}\) is the standard deviation of the within module degrees.</p> <h1 id="global-properties">Global properties</h1> <h2 id="radius-and-diameter">Radius and diameter</h2> <p>The radius and the diameter measure how easy it is to traverse a graph. They both are quantities based on the maximum <a href="/blog/graphs-glossary/#distance">distance</a> between any two vertices found in the graph. Specifically, the <strong>radius</strong> is the minimum maximum distance; the <strong>diameter</strong> is the maximum distance.</p> <h2 id="global-clustering-coefficient">Global clustering coefficient</h2> <p>The <strong>global clustering coefficient</strong> <em>of a graph</em> is the ratio between closed and open <a href="/blog/graphs-glossary/#triplet">triplets</a> in that graph. Or, equivalently:</p> \[C = \frac {3 \times \text{triangles}} {\text{triplets}}\] <p><a href="https://r.igraph.org/reference/transitivity.html">Often</a>, the clustering coefficient of a directed graph is computed without considering the direction of the edges.</p> <h2 id="centrality">Centrality</h2> <p><strong>Centrality</strong> assigns a score or a ranking to every vertex in the graph, which represents its importance in the network according to some metric. <a href="#degree">Degree</a> and <a href="#participation">participation</a> are examples of such metrics, but there are others.</p> <p>WIP</p>]]></content><author><name></name></author><category term="graphs"/><summary type="html"><![CDATA[Multiscale ways to talk about graphs]]></summary></entry><entry><title type="html">Introduction to Graphs</title><link href="https://hclimente.github.io/blog/graphs-basics/" rel="alternate" type="text/html" title="Introduction to Graphs"/><published>2025-01-23T11:59:00+00:00</published><updated>2025-01-23T11:59:00+00:00</updated><id>https://hclimente.github.io/blog/graphs-basics</id><content type="html" xml:base="https://hclimente.github.io/blog/graphs-basics/"><![CDATA[<p>Graph theory was founded in the 18th century, with <a href="https://en.wikipedia.org/wiki/Leonhard_Euler">Euler’s</a> article on the <a href="https://en.wikipedia.org/wiki/Seven_Bridges_of_K%C3%B6nigsberg">Seven Bridges of Königsberg problem</a>. The city of Königsberg had seven bridges, connecting the north and south banks of the river, and two fluvial islands (Kneiphof and Lomse). Back then, Königsberg looked roughly like this:</p> <pre><code class="language-mermaid">---
config:
  layout: elk
  look: handDrawn
---
graph LR
    N[North Bank]
    K[Kneiphof Island]
    L[Lomse Island]
    S[South Bank]

    N === K
    N === K
    N === L
    S === L
    S === K
    S === K
    K === L
</code></pre> <p>The problem was to find a path such that a walker would cross each bridge exactly once. To solve this problem (by proving it had no solution), Euler found two useful abstractions: vertices representing land masses, and edges representing bridges. A key insight of framing the problem like this was that a graph can be represented in many ways (e.g., where to position the vertices), and all of them are equivalent. Euler’s theorem (yes, one of them) is the first theorem in graph theory, and proves that a graph with a number of vertices with an odd <a href="/blog/graph-properties/#degree">degree</a> other than 0 or 2 will have no <a href="/blog/graphs-glossary/#euler-circuit">Euler circuits</a> and no <a href="/blog/graphs-glossary/#euler-trail">Euler trails</a>.</p> <p>In the 21st century, we define graphs as sets of objects (vertices) and pairwise relations between them (edges). Graphs are also known as networks; vertices as nodes; and edges as links. Königsberg is a graph with 4 vertices and 6 edges. Importantly, graphs represent similarities between objects. In maths, <strong><a href="https://en.wikipedia.org/wiki/Equivalence_relation">equivalence</a></strong> formalize the notion than objects can have a relationship of “sameness”. An equivalence relation is a binary relation that is reflexive, transitive and symmetric. It is noted like \(\sim\). The epitome of equivalence relation is “is equal to”. For instance, \(2 = \frac 4 2 = \frac {2\pi} {\pi}\). “Is greater than” is an example of non-equivalence, since it does not meet the symmetric property (e.g., \(2 &gt; 1\) does not imply that \(1 &gt; 2\)). Since edges in a graph also capture this notion of “sameness” in some sense, they are tighly connected to equivalences: \(u \sim v\) implies that there is a <a href="/blog/graphs-glossary/#path">path</a> between vertices \(u\) and \(v\). Equivalently, \(u\) and \(v\) are in the same <a href="/blog/graphs-glossary/#component">component</a>.</p> <p>Importantly, graphs are mathematical objects. A graph \(G\) can be defined as</p> \[G = (V, E)\] <p>Where \(V\) denotes the set of vertices and \(E\) the set of edges (pairs of vertices).</p> <blockquote> <p><strong><em>Notation note:</em></strong> \(V\) and \(E\) above refer sets, specifically to the vertex and edge set of a specific graph (\(G\)). Note that they are in italics. In contrast, the \(\text{V}\) in \(\text{V}(H)\) and \(\text{V}(I)\) refer to the vertex sets of graphs \(H\) and \(I\) respectively. Note that they are not in italics. I will follow the same convention elsewhere, e.g. when writing about <a href="/blog/graphs-linear-algebra/">graph’s matrices</a>.</p> </blockquote> <p>This notation allows to concisely define multiple types of graph:</p> <ul> <li> <p>Undirected graph: \(E \subseteq \{ \{u, v\} \mid u, v \in V \}\), i.e., the edges do not have directions.</p> <pre><code class="language-mermaid">---
config:
layout: elk
look: handDrawn
---
graph LR

    vertex_a((a))
    vertex_b((b))
    vertex_c((c))

    vertex_a === vertex_b
    vertex_a === vertex_c
    vertex_b === vertex_c
</code></pre> </li> <li> <p>Directed graphs: \(E \subseteq \{ (u, v) \mid u, v \in V \}\), i.e., the edges have directions.</p> <pre><code class="language-mermaid">---
config:
layout: elk
look: handDrawn
---
graph LR

    vertex_a((a))
    vertex_b((b))
    vertex_c((c))

    vertex_a --&gt; vertex_b
    vertex_a --&gt; vertex_c
    vertex_b --&gt; vertex_c
</code></pre> </li> </ul> <p>Sometimes, graphs are defined as triples. An example are <a href="/blog/graphs-glossary/#multigraph"><strong>multigraphs</strong></a>, graphs in which multiple edges between the same pair of vertices are allowed. They are triples \(G = (V, E, \phi)\) in which the incidence function \(\phi\) represents the mapping from edges to pairs of vertices. Königsberg is an example of multigraph, since it has multiple bridges connecting the same landmasses (e.g., the North Bank and the Kneiphof Island). For instance, the Königsberg graph is an undirected multigraph with:</p> \[V = \{N, K, L, S \}\] \[E = \{ e_1, e_2, e_3, e_4, e_5, e_6, e_7 \}\] \[\phi(x) = \begin{cases} \{ N, K \} &amp; \text{if $x = e_1$} \\ \{ N, K \} &amp; \text{if $x = e_2$} \\ \{ N, L \} &amp; \text{if $x = e_3$} \\ \{ S, L \} &amp; \text{if $x = e_4$} \\ \{ S, K \} &amp; \text{if $x = e_5$} \\ \{ S, K \} &amp; \text{if $x = e_6$} \\ \{ K, L \} &amp; \text{if $x = e_7$} \\ \end{cases}\] <p>Another type of graph that requires a triple are <strong>weighted</strong> graphs, in which each edge has a weight. They are triples \(G = (V, E, w)\) in which \(w\) is a function that maps edges to their weights. Note that weighted multigraph would be a quadruple, since it would require both an incidence and a weight functions.</p> <blockquote> <p><strong>Note:</strong> unless specified otherwise, in this series I will focus on <a href="/blog/graphs-glossary/#simple-graph"><em>simple</em></a> graphs, which have at most one edge between any pair of vertices and no loops.</p> </blockquote> <h1 id="further-reading">Further reading</h1> <ul> <li><a href="https://arxiv.org/abs/2308.04512">An introduction to graph theory</a></li> </ul>]]></content><author><name></name></author><category term="graphs"/><summary type="html"><![CDATA[Basic definitions]]></summary></entry><entry><title type="html">Graph Glossary</title><link href="https://hclimente.github.io/blog/graphs-glossary/" rel="alternate" type="text/html" title="Graph Glossary"/><published>2025-01-23T11:59:00+00:00</published><updated>2025-01-23T11:59:00+00:00</updated><id>https://hclimente.github.io/blog/graphs-glossary</id><content type="html" xml:base="https://hclimente.github.io/blog/graphs-glossary/"><![CDATA[<h1 id="parts-of-a-graph">Parts of a graph</h1> <h2 id="component">Component</h2> <p>In an <a href="#undirected-graph">undirected</a> graph, a <a href="#connected-graph">connected</a> <a href="#subgraph">subgraph</a> that is not part of a larger connected subgraph.</p> <h2 id="circuit">Circuit</h2> <p>A <a href="#trail">trail</a> in which the first and last vertices are equal. In contrast to the <a href="#cycle">cycle</a>, any vertex can be repeated.</p> <h2 id="cycle">Cycle</h2> <p>A <a href="#trail">trail</a> in which <em>only</em> the first and last vertices are equal. Except for the tails and in contrast to the <a href="#circuit">circuit</a>, vertices cannot be repeated.</p> <h2 id="euler-circuit">Euler circuit</h2> <p>A <a href="#circuit">circuit</a> that visits every edge of the graph.</p> <h2 id="euler-trail">Euler trail</h2> <p>A <a href="#trail">trail</a> that visits every edge of the graph.</p> <h2 id="flow">Flow</h2> <p>An example of a flow is a heat diffusion process across a graph. In such processes, each vertex starts with a certain amount of heat and, at each time point, exchanges heat with its <a href="#neighborhood">neighbors</a> (gains heat from its hotter neighbors; loses it to its colder neighbors).</p> <h2 id="module">Module</h2> <p>A <a href="#subgraph">subgraph</a> whose vertices are densely connected to each other, and loosely to the rest of the graph.</p> <h2 id="orientation">Orientation</h2> <p>An orientation of an <a href="#undirected-graph">undirected</a> graph is the <a href="#directed-graph">directed</a> graph resulting of assigning a direction to each of its vertices. A <a href="#directed-graph">directed</a> graph is oriented if no two vertices form a 2-cycle.</p> <h2 id="path">Path</h2> <p>A <a href="#walk">walk</a> with no repeated <em>vertices</em>.</p> <h2 id="spanning-graph">Spanning graph</h2> <p>A subgraph \(G' = (V', E')\) of \(G = (V, E)\) is spanning if \(V' = V\).</p> <h2 id="subgraph">Subgraph</h2> <p>A graph resulting from subsetting vertices from a larger graph, as well as a subset of the edges connecting them.</p> <h3 id="induced-subgraph">Induced subgraph</h3> <p>A <a href="#subgraph">subgraph</a> containing <em>all</em> the edges connecting the vertices in the original graph.</p> <h2 id="trail">Trail</h2> <p>A <a href="#walk">walk</a> with no repeated <em>edges</em>.</p> <h2 id="triplet">Triplet</h2> <p>A set of 3 vertices and at least 2 edges between them, none of which are redundant or loops. <em>Open</em> triplets have exactly 2 edges; <em>closed</em> triplets have exactly 3.</p> <h2 id="walk">Walk</h2> <p>A walk <em>on a graph</em> is an alternating sequence of vertices and edges, such that every vertex is <a href="#incidence">incident</a> with the previous and the following edge (if any).</p> <h1 id="properties-of-vertices">Properties of vertices</h1> <h2 id="adjacency">Adjacency</h2> <p>A vertex is adjacent with <em>another vertex</em> if they are connected by an edge. \(u \sim v\) denote that \(u\) and \(v\) are adjacent.</p> <h2 id="degree">Degree</h2> <p>The degree of a vertex in a (simple) <a href="#undirected-graph">undirected</a> graph is the number of edges <a href="#incidence">incident</a> with that vertex. In a (simple) <a href="#directed-graph">directed</a> graph we distinguish the indegree (number of edges with the vertex as their <a href="#destination">destination</a>) and the outdegree (number of edges with the vertex as their <a href="#source">source</a>).</p> <h2 id="destination">Destination</h2> <p>In a <a href="#directed-graph">directed</a> graph, the destination <em>of an edge</em> is the vertex at the head of the edge.</p> <h2 id="distance">Distance</h2> <p>The distance <em>between two vertices</em> is the shortest <a href="#path">path</a> between them.</p> <h2 id="hub">Hub</h2> <p>A vertex with a high <a href="#degree">degree</a>.</p> <h2 id="neighborhood">Neighborhood</h2> <p>The neighborhood of vertex \(v\) is the <a href="#induced-subgraph">induced subgraph</a> containing all the vertices <a href="#adjacency">adjacent</a> to \(v\).</p> <h2 id="incidence">Incidence</h2> <p>A vertex is incident <em>with an edge</em> if the vertex is one of the two vertices the edge connects.</p> <h2 id="source">Source</h2> <p>In a <a href="#directed-graph">directed</a> graph, the source <em>of an edge</em> is the vertex at the tail of the edge.</p> <h1 id="types-of-graphs">Types of graphs</h1> <h2 id="acyclical-graph">Acyclical graph</h2> <p>A graph without <a href="#cycle">cycles</a>.</p> <h2 id="bipartite-graph">Bipartite graph</h2> <p>A <a href="#acyclical-graph">acyclical</a> graph whose vertices can be divided into two sets such that no pair of vertices in the same set are <a href="#adjacency">adjacent</a>. Often, each of these sets are referred to as colors, and so we say that “there is no edge between two vertices of the same color.”</p> <h2 id="complete-graph">Complete graph</h2> <p>A simple, <a href="#undirected-graph">undirected</a> graph in which every pair of vertices are connected by an edge. Complete graph are usually denoted by letter \(K\) with a subindex that indicates the total number of vertices. For instance, \(K_6\) represents the complete graph with 6 vertices.</p> <h2 id="connected-graph">Connected graph</h2> <p>A graph in which a <a href="#path">path</a> exists between every pair of vertices.</p> <h2 id="digraph">Digraph</h2> <p>A <a href="#directed-graph">directed</a> graph.</p> <h2 id="directed-graph">Directed graph</h2> <p>See <a href="/blog/graphs-basics/">Introduction to Graphs</a>.</p> <h2 id="forest">Forest</h2> <p>An <a href="#undirected-graph">undirected</a> graph in which any two vertices are connected by at most one path. That is, a disjoint union of <a href="#tree">trees</a>.</p> <h2 id="multigraph">Multigraph</h2> <p>A graph which can have multiple edges between the same pair of vertices.</p> <h2 id="regular">Regular</h2> <p>A graph in which every vertex has the same degree.</p> <h2 id="simple-graph">Simple graph</h2> <p>A graph with at most one edge between any pair of vertices and no loops.</p> <h2 id="tree">Tree</h2> <p>An <a href="#undirected-graph">undirected</a> graph in which there is only one <a href="#path">path</a> between every pair of nodes.</p> <h2 id="triangle-graph">Triangle graph</h2> <p>A <a href="#triplet">triplet</a> with 3 edges. It consists of <em>three</em> closed triplets, each centered around each of the vertices.</p> <h2 id="undirected-graph">Undirected graph</h2> <p>See <a href="/blog/graphs-basics/">Introduction to Graphs</a>.</p> <h1 id="spectral-graph-theory">Spectral graph theory</h1> <h2 id="first-k-eigenvectors">First <em>k</em> eigenvectors</h2> <p>Eigenvectors associated with the <em>k</em> smallest eigenvalues.</p>]]></content><author><name></name></author><category term="graphs"/><summary type="html"><![CDATA[Definitions of frequent graph terms]]></summary></entry><entry><title type="html">Python functions</title><link href="https://hclimente.github.io/blog/python-functions/" rel="alternate" type="text/html" title="Python functions"/><published>2024-05-26T15:59:00+00:00</published><updated>2024-05-26T15:59:00+00:00</updated><id>https://hclimente.github.io/blog/python-functions</id><content type="html" xml:base="https://hclimente.github.io/blog/python-functions/"><![CDATA[<p>While reading the book “Effective Python: 90 Specific Ways to Write Better Python” I discovered a few interesting behaviors about Python funcions. I list some of them below.</p> <h1 id="functions-arguments-mutable-vs-immutable">Function’s arguments: mutable vs. immutable</h1> <p>The distiction between mutable and immutable datatypes has implications when they are passed to functions as arguments. When an immutable datatype is passed, Python creates a copy and assigns it to a new variable. Hence, the original variable does not get affected:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sum_five</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
    <span class="n">a</span> <span class="o">+=</span> <span class="mi">5</span>
    <span class="k">return</span> <span class="n">a</span>

<span class="n">a</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">b</span> <span class="o">=</span> <span class="nf">sum_five</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">a = </span><span class="si">{</span><span class="n">a</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">b = </span><span class="si">{</span><span class="n">b</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 3
b = 8
</code></pre></div></div> <p>Mutable types, on the other hand, are passed by reference. In other words, the function will operate on the same object that existed outside of the function:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">append_three</span><span class="p">(</span><span class="nb">input</span><span class="p">:</span> <span class="nb">list</span><span class="p">):</span>
    <span class="nb">input</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">input</span>

<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="n">b</span> <span class="o">=</span> <span class="nf">append_three</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">a = </span><span class="si">{</span><span class="n">a</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">b = </span><span class="si">{</span><span class="n">b</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1, 2, 3]
b = [1, 2, 3]
</code></pre></div></div> <h1 id="arguments">Arguments</h1> <h2 id="avoid-mutable-default-arguments">Avoid mutable default arguments</h2> <p>Sometimes we might define some default value for a function’s arguments. However it is often not a good idea to use mutable datatypes as a default. The default object is only created once, leading to counterintuitive behaviors:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">append_three</span><span class="p">(</span><span class="nb">input</span><span class="p">:</span> <span class="nb">list</span> <span class="o">=</span> <span class="p">[]):</span>
    <span class="nb">input</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">input</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">append_three</span><span class="p">())</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">append_three</span><span class="p">())</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[3]
[3, 3]
</code></pre></div></div> <h2 id="force-the-use-of-keyword-arguments">Force the use of keyword arguments</h2> <p>We can force the use of keyword arguments using <code class="language-plaintext highlighter-rouge">*</code>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">format</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">debug_info</span> <span class="o">=</span> <span class="sh">""</span>
    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span>
        <span class="n">debug_info</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Formatting string: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">debug_info</span><span class="si">}{</span><span class="n">x</span><span class="p">.</span><span class="nf">title</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">hey there</span><span class="sh">"</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Formatting string: hey there
Hey There
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">format</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">debug_info</span> <span class="o">=</span> <span class="sh">""</span>
    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span>
        <span class="n">debug_info</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Formatting string: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">debug_info</span><span class="si">}{</span><span class="n">x</span><span class="p">.</span><span class="nf">title</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">hey there</span><span class="sh">"</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: format() takes 1 positional argument but 2 were given
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">hey there</span><span class="sh">"</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Formatting string: hey there
Hey There
</code></pre></div></div> <h1 id="functions-as-first-class-citizens">Functions as first-class citizens</h1> <p>As Python objects, functions are first-class citizens, which unlocks several useful features, like closures and decorators.</p> <h2 id="closures">Closures</h2> <h2 id="decorators">Decorators</h2> <p>A decorator is syntactic sugar to easily create a wrapper around our functions.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">wrapper</span><span class="p">()</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div> <h1 id="references">References</h1> <ul> <li>B. Slatkin, Effective Python: 90 Specific Ways to Write Better Python.</li> </ul>]]></content><author><name></name></author><category term="python"/><category term="coding"/><summary type="html"><![CDATA[Fourth post in the Python series]]></summary></entry><entry><title type="html">Data Structures and Algorithms</title><link href="https://hclimente.github.io/blog/data-structures-algorithms/" rel="alternate" type="text/html" title="Data Structures and Algorithms"/><published>2024-02-24T15:59:00+00:00</published><updated>2024-02-24T15:59:00+00:00</updated><id>https://hclimente.github.io/blog/data-structures-algorithms</id><content type="html" xml:base="https://hclimente.github.io/blog/data-structures-algorithms/"><![CDATA[<h1 id="data-structures">Data structures</h1> <h2 id="graphs">Graphs</h2> <p>Graphs are data structures composed of a set of objects (<em>nodes</em>) and pairwise relationships between them (<em>edges</em>). Notably, edges can have properties, like a direction or a weight.</p> <p>Graphs can be represented as:</p> <ul> <li>Adjacency matrices: matrices in which every row \(i\) contains the edges of node \(i\). Specifically, \(\text{row}_{ij}\) is 1 if nodes \(i\) and \(j\) are connected, and 0 otherwise. They are symmetric for undirected graphs.</li> <li>Adjacency list: list of pairs, each of which represents an edge by describing the two involved node indexes. The node order can be meaningful (in directed graphs) or not (in undirected graphs).</li> <li>Hash map: keys are node ids, values are the set of nodes each is connected to. This is a very convenient representation.</li> </ul> <p>A common type of graph in computer science are grids, in which nodes are laid in a grid, and they are connected to the nodes selected top, bottom, left and right.</p> <h2 id="binary-trees">Binary trees</h2> <p>A tree is a graph in which there is only one path between every pair of nodes. Some concepts related to trees are: root, the (only) node on level 1; parent, the connected node in the level above; child, a connected in the level below; and leaf, a node with no children. Importantly, a tree has only one root. A very useful type of tree are <em>binary</em> trees, in which every node has <em>at most</em> two children.</p> <p>Often trees are represented using classes. Specifically, we would have an object <code class="language-plaintext highlighter-rouge">Node</code> like:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="n">self</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">None</span>
</code></pre></div></div> <p>We would keep a reference to the root, and build a try by successively creating new nodes and assigning them to <code class="language-plaintext highlighter-rouge">.left</code> or <code class="language-plaintext highlighter-rouge">.right</code>.</p> <h3 id="heaps--priority-queues">Heaps / priority queues</h3> <p>(Min-)Heaps are binary trees in which the value of every parent is lower or equal than any of its children. This gives them their most interesting property: the minimum element is always on top. (Similarly, in max-heaps, the maximum stands at the root.) Because of that, they are also called priority queues. A famous algorithm that can be solved with heaps is <a href="https://leetcode.com/problems/find-median-from-data-stream/">computing the running median of a data stream</a>.</p> <p>In Python, <a href="https://docs.python.org/3/library/heapq.html"><code class="language-plaintext highlighter-rouge">heapq</code></a> provides an implementation of the heap. Any populated list can be transformed in-place into a heap:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">heapq</span>

<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">]</span>

<span class="n">heapq</span><span class="p">.</span><span class="nf">heapify</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[-5, 2, 5, 3, 123, 6, 8]
</code></pre></div></div> <p>The elements have been reordered to represent a heap: each parent note is indexed by \(k\), and its children by \(2k+1\) and \(2k+2\).</p> <p>Let’s see some common operations:</p> <ul> <li> <p>Push a new element (and sift up):</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">heapq</span><span class="p">.</span><span class="nf">heappush</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div> </div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[-10, -5, 5, 2, 123, 6, 8, 3]
</code></pre></div> </div> </li> <li> <p>Pop the root (and sift down):</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">heapq</span><span class="p">.</span><span class="nf">heappop</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div> </div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-10
</code></pre></div> </div> </li> <li> <p>Combine the two operations:</p> <ul> <li>Push, then pop: <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">heapq</span><span class="p">.</span><span class="nf">heappushpop</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span><span class="p">)</span> <span class="c1"># [-5, 2, 5, 3, 123, 6, 8]
</span></code></pre></div> </div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-7
</code></pre></div> </div> </li> <li>Pop, then push: <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">heapq</span><span class="p">.</span><span class="nf">heapreplace</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span><span class="p">)</span> <span class="c1"># [-7, 2, 5, 3, 123, 6, 8]
</span></code></pre></div> </div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-5
</code></pre></div> </div> </li> </ul> </li> </ul> <p>Let’s examine the time complexity of each operation:</p> <ul> <li>Creation: \(O(n)\)</li> <li>Update: \(O(\log n)\)</li> <li>Min/max retrieval: \(O(1)\)</li> </ul> <p><strong>Note:</strong> Heaps are great to recover the smallest element, but not the k<sup>th</sup> smallest one. <a href="#binary-search-trees">BSTs</a> might me more appropriate for that.</p> <h3 id="binary-search-trees">Binary search trees</h3> <p>Binary serach trees (BSTs) are binary trees in which every node meets two properties:</p> <ul> <li>All descendants on the left are smaller than the parent node.</li> <li>All descendants on the right are larger than the parent node.</li> </ul> <p>They provide a good balance between insertion and search speeds:</p> <ul> <li>Search: done recursively on the tree. When balanced, search is as good as binary search on a sorted array.</li> <li>Insertion: also done recursively, by traversing the tree from the root in order until we find an appropriate place.</li> </ul> <p>The time complexity of both is \(O(\log n)\) when the tree is <strong>balanced</strong>; otherwise it is \(O(n)\). (Balanced trees are those whose height is small compared to the number of nodes. Visually, they look full and all branches look similarly long.) As a caveat, no operation takes constant time on a BST.</p> <h2 id="tries">Tries</h2> <p>Tries (from re<em>trie</em>val) are trees that store strings:</p> <ul> <li>Nodes represent characters, except for the root, represents the string start.</li> <li>Children represent each of the possible characters that can follow the parent.</li> <li>Leaf nodes represent the end of the string.</li> <li>Paths from the root to the leafs represent the different words.</li> </ul> <p>Due to its nature, tries excel at two things:</p> <ol> <li>Saving space when storing words sharing the same prefix, since they only store the prefix once.</li> <li>Searching words, which can be done in \(O(\text{word length})\). Similarly, they make it very fast to search for words with a given prefix.</li> </ol> <p>These two properties make them excellent at handling spell checking and autocomplete functions.</p> <h2 id="union-finds">Union-finds</h2> <p>Union-finds, also known as Disjoint-sets, store a collection of non-overlapping sets. Internally, sets are represented as directed trees, in which every member points towards the root of the tree. The root is just another member, which we call the <strong>representative</strong>. Union-finds provide two methods:</p> <ul> <li><strong>Find:</strong> returns the set an element belongs to. Specifically, it returns its representative.</li> <li><strong>Union:</strong> combines two sets. Specifically, first, it performs two finds. If the representatives differ, it will connect one tree’s root to the root of the other.</li> </ul> <p>Union-finds can be represented as an array, in which every member of the universal set is one element. Members linked to a set take as value the index of another member of the set, often the root. Consequently, members that are the only members of a set take their own value. The same goes for the root. While this eliminates many meaningful pairwise relationship between the elements, it speeds up the two core operations.</p> <p>Every set has a property, the <em>rank</em>, which approximates its depth. Union is performed <em>by rank</em>: the root with the highest rank is picked as the new root. Find performs an additional step, called <em>path compresion</em>, in which every member in the path to the root will be directly bound to the root. This increases the cost of that find operation, but keeps the tree shallow and the paths short, and hence speeds up subsequent find operations.</p> <p>Here is a Python implementation:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UnionFind</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">size</span><span class="p">)]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">rank</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">size</span>

    <span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">parent</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="n">x</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">parent</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">parent</span><span class="p">[</span><span class="n">x</span><span class="p">])</span>  <span class="c1"># Path compression
</span>        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">parent</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">union</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="n">rootX</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">rootY</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rootX</span> <span class="o">!=</span> <span class="n">rootY</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">rank</span><span class="p">[</span><span class="n">rootX</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">rank</span><span class="p">[</span><span class="n">rootY</span><span class="p">]:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">parent</span><span class="p">[</span><span class="n">rootY</span><span class="p">]</span> <span class="o">=</span> <span class="n">rootX</span>
                <span class="n">self</span><span class="p">.</span><span class="n">rank</span><span class="p">[</span><span class="n">rootX</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">rank</span><span class="p">[</span><span class="n">rootY</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">parent</span><span class="p">[</span><span class="n">rootX</span><span class="p">]</span> <span class="o">=</span> <span class="n">rootY</span>
                <span class="n">self</span><span class="p">.</span><span class="n">rank</span><span class="p">[</span><span class="n">rootY</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">rank</span><span class="p">[</span><span class="n">rootX</span><span class="p">]</span>
</code></pre></div></div> <h2 id="bloom-filters">Bloom filters</h2> <p>Bloom filters are data structures to probabilistically check if an element is a member of a set. It can be used when false positives are acceptable, but false negatives are not. For instance, if we have a massive data set, and we want to quickly discard all the elements that are not part of a specific set.</p> <p>The core structure underlying bloom filters is a bit array, which makes it highly compact in memory. When initialized, all the positions are set to 0. When inserting a given element, we apply multiple hash functions to it, each of which would map the element to a bucket in the array. This would be the element’s “signature”. Then, we would set the value of each of these buckets to 1. To probabilistically verify if an element is in the array, we would compute its signature and examine if all the buckets take a value of 1.</p> <h2 id="linked-lists">Linked lists</h2> <p>A linked list is a DAG in which almost every node has exactly one inbound edge and one outbound edge. The exceptions are the <em>head</em>, a node with no inbound egde, and the <em>tail</em>, a node with no outbound edge. Like arrays, linked lists are ordered. However, they have one key diference: insertions in the middle of an array are expensive (\(O(n)\)), since they require copying all the items of the array, while they are cheap in the linked list (\(O(1)\)), since they only require changing two pointers.</p> <p>This is an implementation of a linked list:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>


<span class="n">a</span> <span class="o">=</span> <span class="nc">Node</span><span class="p">(</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="nc">Node</span><span class="p">(</span><span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">)</span>
<span class="n">c</span> <span class="o">=</span> <span class="nc">Node</span><span class="p">(</span><span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nc">Node</span><span class="p">(</span><span class="sh">"</span><span class="s">D</span><span class="sh">"</span><span class="p">)</span>

<span class="n">a</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">b</span>
<span class="n">b</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">c</span>
<span class="n">c</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">d</span>
</code></pre></div></div> <h1 id="algorithms">Algorithms</h1> <h2 id="divide-and-conquer-problems">Divide and conquer problems</h2> <p>Divide and conquer algorithms work by breaking down a problem into <em>two or more</em> smaller subproblems of the same type. These subproblems are tackled recursively, until the subproblem is simple enough to have a trivial solution. Then, the solutions are combined in a bottom-up fashion. For examples in <a href="#sorting-problems">sorting</a>, see <a href="#merge-sort">merge sort</a> and <a href="#quick-sort">quick sort</a>.</p> <h2 id="intervals-and-scheduling-problems">Intervals and scheduling problems</h2> <p>The input of interval problems is a list of lists, each of which contains a pair <code class="language-plaintext highlighter-rouge">[start_i, end_i]</code> representing an interval. Typical questions revolve around how much they overlap with each other, or inserting and merging a new element.</p> <p><strong>Note:</strong> There are many corner cases, like no intervals, intervals which end and start at the same time or intervals that englobe other intervals. Make sure to think it through.</p> <p><strong>Note:</strong> If the intervals are not sorted, the first step is <em>almost always</em> <strong>sorting them</strong>, either by start or by end. This usually brings the time complexity to \(O(n \log n)\). In some cases we need to perform two sorts, by start and end separately, before merging them. This produces the sequence of events that are happening.</p> <h2 id="sorting-problems">Sorting problems</h2> <p>Sorting consists on arranging the elements of an input array according to some criteria. There are multiple ways to sort an input, each offerintg different trade-offs:</p> <ul> <li>Memory usage: <em>in-place</em> approaches sort the items in place, without using extra space.</li> <li>Stability: stable algorithms preserve the original relative order when faced with two equal keys.</li> <li>Internal vs external: internal sorts operate exclusively on RAM memory; external sorts do it outside (e.g., disk or tape).</li> <li>Recursive vs non-recursive</li> <li>Comparison-based: comparison-based algorithms work by comparing pairs of items. All the algorithms I cover here fall under this category, but not all (e.g., <a href="https://en.wikipedia.org/wiki/Counting_sort">counting sort</a>).</li> </ul> <p>I implement a couple of those below. Their complexities are as follows:</p> <table> <thead> <tr> <th>Algorithm</th> <th>Time complexity</th> <th>Space complexity</th> </tr> </thead> <tbody> <tr> <td><a href="#selection-sort">Selection</a></td> <td>\(O(n^2)\)</td> <td>\(O(1)\)</td> </tr> <tr> <td><a href="#bubble-sort">Bubble</a></td> <td>\(O(n^2)\)</td> <td>\(O(1)\)</td> </tr> <tr> <td><a href="#merge-sort">Merge</a></td> <td>\(O(n \log n)\)</td> <td>\(O(n)\)</td> </tr> <tr> <td><a href="#quick-sort">Quicksort</a></td> <td>\(O(n \log n)\) (average)</td> <td>\(O(\log n)\)</td> </tr> <tr> <td><a href="#topological-sort">Topological</a></td> <td>\(O(|V| + |E|)\)</td> <td>\(O(|V|)\)</td> </tr> </tbody> </table> <h3 id="selection-sort">Selection sort</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">selection_sort</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)):</span>
        <span class="n">curr_max</span><span class="p">,</span> <span class="n">curr_max_idx</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="sh">"</span><span class="s">-inf</span><span class="sh">"</span><span class="p">),</span> <span class="bp">None</span>

        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="n">i</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">curr_max</span><span class="p">:</span>
                <span class="n">curr_max</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
                <span class="n">curr_max_idx</span> <span class="o">=</span> <span class="n">j</span>

        <span class="n">x</span><span class="p">[</span><span class="o">~</span><span class="n">i</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="n">curr_max_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">curr_max_idx</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="o">~</span><span class="n">i</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">x</span>

<span class="nf">bubble_sort</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div> <h3 id="bubble-sort">Bubble sort</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">bubble_sort</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">x</span>

<span class="nf">bubble_sort</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div> <h3 id="merge-sort">Merge sort</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>

    <span class="c1"># base case
</span>    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">x</span>

    <span class="c1"># recursively sort the two halves
</span>    <span class="n">mid</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">sorted_left</span> <span class="o">=</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">x</span><span class="p">[:</span><span class="n">mid</span><span class="p">])</span>
    <span class="n">sorted_right</span> <span class="o">=</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="n">mid</span><span class="p">:])</span>

    <span class="c1"># merge the two sorted halves
</span>    <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">merged</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">sorted_left</span><span class="p">)</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">sorted_right</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">sorted_left</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">sorted_right</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
            <span class="n">merged</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">sorted_left</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">merged</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">sorted_right</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="c1"># since slicing forgives out of bounds starts
</span>    <span class="c1"># hence, this will work when i &gt;= len(sorted_left)
</span>    <span class="n">merged</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">sorted_left</span><span class="p">[</span><span class="n">i</span><span class="p">:])</span>
    <span class="n">merged</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">sorted_right</span><span class="p">[</span><span class="n">j</span><span class="p">:])</span>

    <span class="k">return</span> <span class="n">merged</span>


<span class="nf">merge_sort</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div> <h3 id="quick-sort">Quick sort</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>

    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">x</span>

    <span class="n">pivot</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># preferrable to modifying the input with x.pop()
</span>    <span class="n">lower</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">higher</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c1"># populate lower and higher in one loop,
</span>    <span class="c1"># instead of two list comprehensions
</span>    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">x</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">num</span> <span class="o">&lt;=</span> <span class="n">pivot</span><span class="p">:</span>
            <span class="n">lower</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">higher</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>

    <span class="k">return</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="n">lower</span><span class="p">)</span> <span class="o">+</span> <span class="p">[</span><span class="n">pivot</span><span class="p">]</span> <span class="o">+</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="n">higher</span><span class="p">)</span>

<span class="nf">quick_sort</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div> <h3 id="further-reading">Further reading</h3> <ul> <li><a href="https://medium.com/basecs/sorting-out-the-basics-behind-sorting-algorithms-b0a032873add">Sorting Out The Basics Behind Sorting Algorithms</a></li> </ul> <h2 id="linked-lists-1">Linked lists</h2> <h3 id="traversal">Traversal</h3> <p>Traversing a linked list simply consists on passing through every element. We can do that starting from the head, following the pointer to the next node and so on.</p> <p>For instance, this algorithm stores all the values into an array:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>


<span class="k">def</span> <span class="nf">create_list</span><span class="p">():</span>
    <span class="n">a</span> <span class="o">=</span> <span class="nc">Node</span><span class="p">(</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">b</span> <span class="o">=</span> <span class="nc">Node</span><span class="p">(</span><span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">c</span> <span class="o">=</span> <span class="nc">Node</span><span class="p">(</span><span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">d</span> <span class="o">=</span> <span class="nc">Node</span><span class="p">(</span><span class="sh">"</span><span class="s">D</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">a</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">b</span>
    <span class="n">b</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">c</span>
    <span class="n">c</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">d</span>
    <span class="k">return</span> <span class="n">a</span>

<span class="k">def</span> <span class="nf">fetch_values</span><span class="p">(</span><span class="n">head</span><span class="p">):</span>

    <span class="n">curr</span> <span class="o">=</span> <span class="n">head</span>
    <span class="n">values</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">while</span> <span class="n">curr</span><span class="p">:</span>
        <span class="n">values</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">curr</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="nb">next</span>

<span class="n">a</span> <span class="o">=</span> <span class="nf">create_list</span><span class="p">()</span>
<span class="nf">fetch_values</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['A', 'B', 'C', 'D']
</code></pre></div></div> <p>Or recursively:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fetch_values</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">node</span><span class="p">:</span> <span class="k">return</span> <span class="n">values</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">]</span> <span class="o">+</span> <span class="nf">fetch_values</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="nb">next</span><span class="p">)</span>


<span class="nf">fetch_values</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['A', 'B', 'C', 'D']
</code></pre></div></div> <h3 id="search">Search</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_value</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">node</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span>
    <span class="k">elif</span> <span class="n">node</span><span class="p">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>

    <span class="k">return</span> <span class="nf">find_value</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="nb">next</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>


<span class="nf">find_value</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">)</span> <span class="c1"># True
</span><span class="nf">find_value</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">)</span> <span class="c1"># False
</span></code></pre></div></div> <h3 id="keeping-multiple-pointers">Keeping multiple pointers</h3> <p>Often multiple pointers are needed in order to perform certain operations on the list, like reversing it or deleting an element in the middle.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">reverse_list</span><span class="p">(</span><span class="n">head</span><span class="p">):</span>

    <span class="n">left</span><span class="p">,</span> <span class="n">curr</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">head</span>

    <span class="k">while</span> <span class="n">curr</span><span class="p">:</span>
        <span class="n">right</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="nb">next</span>
        <span class="n">curr</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">left</span>
        <span class="n">left</span><span class="p">,</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="p">,</span> <span class="n">right</span>

    <span class="k">return</span> <span class="n">left</span>


<span class="nf">fetch_values</span><span class="p">(</span><span class="nf">reverse_list</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['D', 'C', 'B', 'A']
</code></pre></div></div> <h3 id="merge-lists">Merge lists</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="nf">create_list</span><span class="p">()</span>

<span class="n">x</span> <span class="o">=</span> <span class="nc">Node</span><span class="p">(</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="nc">Node</span><span class="p">(</span><span class="sh">"</span><span class="s">Y</span><span class="sh">"</span><span class="p">)</span>

<span class="n">x</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">y</span>

<span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">head_1</span><span class="p">,</span> <span class="n">head_2</span><span class="p">):</span>

    <span class="n">tail</span> <span class="o">=</span> <span class="n">head_1</span>
    <span class="n">curr_1</span><span class="p">,</span> <span class="n">curr_2</span> <span class="o">=</span> <span class="n">head_1</span><span class="p">.</span><span class="nb">next</span><span class="p">,</span> <span class="n">head_2</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">while</span> <span class="n">curr_1</span> <span class="ow">and</span> <span class="n">curr_2</span><span class="p">:</span>

        <span class="k">if</span> <span class="n">counter</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">tail</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">curr_1</span>
            <span class="n">curr_1</span> <span class="o">=</span> <span class="n">curr_1</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">tail</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">curr_2</span>
            <span class="n">curr_2</span> <span class="o">=</span> <span class="n">curr_2</span><span class="p">.</span><span class="nb">next</span>

        <span class="n">tail</span> <span class="o">=</span> <span class="n">tail</span><span class="p">.</span><span class="nb">next</span>
        <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">if</span> <span class="n">curr_1</span><span class="p">:</span> <span class="n">tail</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">curr_1</span>
    <span class="k">elif</span> <span class="n">curr_2</span><span class="p">:</span> <span class="n">tail</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">curr_2</span>

    <span class="k">return</span> <span class="n">head_1</span>


<span class="nf">fetch_values</span><span class="p">(</span><span class="nf">merge</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['A', 'X', 'B', 'Y', 'C', 'D']
</code></pre></div></div> <h3 id="fast-and-slow-pointers">Fast and slow pointers</h3> <p>Using two pointers that iterate the list at different speeds can help with multiple problems: finding the middle of a list, detecting cycles, or finding the element at a certain distance from the end. For instance, this is how you would use this technique to find the middle node:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_middle</span><span class="p">(</span><span class="n">head</span><span class="p">):</span>
    <span class="n">fast</span> <span class="o">=</span> <span class="n">slow</span> <span class="o">=</span> <span class="n">head</span>
    <span class="k">while</span> <span class="n">fast</span> <span class="ow">and</span> <span class="n">fast</span><span class="p">.</span><span class="nb">next</span><span class="p">:</span>
        <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span>
        <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="p">.</span><span class="nb">next</span>
    <span class="k">return</span> <span class="n">slow</span><span class="p">.</span><span class="n">val</span>


<span class="n">a</span> <span class="o">=</span> <span class="nf">create_list</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">find_middle</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
</code></pre></div></div> <h2 id="search-problems">Search problems</h2> <h4 id="in-order-traversal">In-order traversal</h4> <p>A very useful algorithm to know is how to iterate a BST in order, from the smallest to the largest value in the tree. It has a very compact recursive implementation:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TreeNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="n">self</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">left</span>
        <span class="n">self</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">right</span>


<span class="k">def</span> <span class="nf">inorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">root</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">inorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">)</span> <span class="o">+</span> <span class="p">[</span><span class="n">root</span><span class="p">.</span><span class="n">val</span><span class="p">]</span> <span class="o">+</span> <span class="nf">inorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>
</code></pre></div></div> <p>However, a non-recursive implementation might be more easily adaptable to other problems:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">inorder_traversal</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>

    <span class="n">output</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">while</span> <span class="n">root</span> <span class="ow">or</span> <span class="n">stack</span><span class="p">:</span>

        <span class="k">while</span> <span class="n">root</span><span class="p">:</span>
            <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
            <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="p">.</span><span class="n">left</span>

        <span class="n">root</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
        <span class="n">output</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
        <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="p">.</span><span class="n">right</span>

    <span class="k">return</span> <span class="n">output</span>
</code></pre></div></div> <p>For instance, to finding the k-smallest element:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_k_smallest</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>

    <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">while</span> <span class="n">root</span> <span class="ow">or</span> <span class="n">stack</span><span class="p">:</span>

        <span class="k">while</span> <span class="n">root</span><span class="p">:</span>
            <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
            <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="p">.</span><span class="n">left</span>

        <span class="n">root</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
        <span class="n">k</span> <span class="o">-=</span> <span class="mi">1</span>

        <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span>

        <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="p">.</span><span class="n">right</span>

    <span class="k">return</span> <span class="bp">None</span>


<span class="c1"># Construct the BST
#       3
#      / \
#     1   4
#      \
#       2
</span><span class="n">root</span> <span class="o">=</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">root</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">root</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

<span class="nf">find_k_smallest</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2
</code></pre></div></div> <h2 id="graph-problems">Graph problems</h2> <h3 id="traversals">Traversals</h3> <p>The bread and butter of graph problems are traversal algorithms. Let’s study them.</p> <h4 id="depth-first-traversal">Depth first traversal</h4> <p>In a depth-first traversal (DFT), given a starting node, we recursively visit each of its neighbors before moving to the next one. In a 2D grid, it would involve picking a direction, and following it until we reach a bound. Then we would pick another direction, and do the same. Essentially, the exploration path looks like a snake.</p> <p>The data structure underlying DFT is a <strong>stack</strong>:</p> <ol> <li>When we visit a node, we push all of its neighbors. Hence, each frame in the stack is a node to visit.</li> <li>We pop from the stack to visit the next node. Then we add its neighbors to the stack and continue.</li> <li>Once we can’t go deeper, pop will retrieve the last, unvisited branching point.</li> <li>Once the stack is empty, our job is done.</li> </ol> <p>Let’s see an explicit implementation of the stack:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">graph</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">b</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">c</span><span class="sh">"</span><span class="p">},</span>
    <span class="sh">"</span><span class="s">b</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">d</span><span class="sh">"</span><span class="p">},</span>
    <span class="sh">"</span><span class="s">c</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">e</span><span class="sh">"</span><span class="p">},</span>
    <span class="sh">"</span><span class="s">d</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">f</span><span class="sh">"</span><span class="p">},</span>
    <span class="sh">"</span><span class="s">e</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span>
    <span class="sh">"</span><span class="s">f</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span>
<span class="p">}</span>

<span class="k">def</span> <span class="nf">depth_first_print</span><span class="p">(</span><span class="n">graph</span><span class="p">:</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">set</span><span class="p">[</span><span class="nb">str</span><span class="p">]],</span> <span class="n">seed</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">seed</span><span class="p">]</span>

    <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
        <span class="n">curr_node</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">curr_node</span><span class="p">)</span>
        <span class="n">stack</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">curr_node</span><span class="p">])</span>

<span class="nf">depth_first_print</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a
b
d
f
c
e
</code></pre></div></div> <p>Alternatively, we can use a recursive approach and an implicit stack:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">depth_first_print</span><span class="p">(</span><span class="n">graph</span><span class="p">:</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">set</span><span class="p">[</span><span class="nb">str</span><span class="p">]],</span> <span class="n">seed</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">neighbor</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">seed</span><span class="p">]:</span>
        <span class="nf">depth_first_print</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">neighbor</span><span class="p">)</span>

<span class="nf">depth_first_print</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a
c
e
b
d
f
</code></pre></div></div> <p>For a graph with nodes \(V\) and edges \(E\), the time complexity is \(O(\|V\|+\|E\|)\) and the space complexity is \(O(\|V\|)\).</p> <p><strong>Note:</strong> Watch out for <em>cycles</em>. Without explicing handling, we might get stuck in infinite traversals. We can keep track of which nodes we have visited using a set, and exit early as soon as we re-visit one.</p> <p><strong>Note:</strong> Some corner cases are the empty graph, graphs with one or two nodes, graphs with multiple components and graphs with cycles.</p> <h4 id="breadth-first-traversal">Breadth first traversal</h4> <p>In a breadth-first traversal (BFT), given a starting node, we first visit its neighbors, then their neighbors, and so on.</p> <p>In a 2D grid, it doesn’t favour any direction. Instead, it looks like a water ripple.</p> <p>The data structure underlying BFT is a <strong>queue</strong>:</p> <ol> <li>When we visit a node, we push all of its neighbors to the queue. As in DFT, each item is a node to visit.</li> <li>We popleft to get the next node. We push allof its neighbors.</li> <li>As before, once the queue is empty, our job is done.</li> </ol> <p>Let’s see an implementation:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">graph</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">b</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">c</span><span class="sh">"</span><span class="p">},</span>
    <span class="sh">"</span><span class="s">b</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">d</span><span class="sh">"</span><span class="p">},</span>
    <span class="sh">"</span><span class="s">c</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">e</span><span class="sh">"</span><span class="p">},</span>
    <span class="sh">"</span><span class="s">d</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">f</span><span class="sh">"</span><span class="p">},</span>
    <span class="sh">"</span><span class="s">e</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span>
    <span class="sh">"</span><span class="s">f</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span>
<span class="p">}</span>

<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="k">def</span> <span class="nf">breadth_first_print</span><span class="p">(</span><span class="n">graph</span><span class="p">:</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">set</span><span class="p">[</span><span class="nb">str</span><span class="p">]],</span> <span class="n">seed</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">queue</span> <span class="o">=</span> <span class="nf">deque</span><span class="p">([</span><span class="n">seed</span><span class="p">])</span>

    <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
        <span class="n">curr_node</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="nf">popleft</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">curr_node</span><span class="p">)</span>
        <span class="n">queue</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">curr_node</span><span class="p">])</span>

<span class="nf">breadth_first_print</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a
b
c
d
e
f
</code></pre></div></div> <p>For a graph with nodes \(V\) and edges \(E\), the time complexity is \(O(\|V\|+\|E\|)\) and the space complexity is \(O(\|V\|)\).</p> <h3 id="topological-sort">Topological sort</h3> <p>A topological sort (or <em>top sort</em>) is an algorithm whose input is a DAG, and whose output is an array such that every node appears after all the nodes that point at it. (Note that, in the presence of cycles, there is no valid topological sorting.) The algorithm looks like this:</p> <ol> <li>Compute the indegree of every node, store it in a hash map.</li> <li>Identify a node with no inbound edges in our hash map.</li> <li>Add the node to the ordering.</li> <li>Decrement the indegree of its neighbors.</li> <li>Repeat from 2 until there are no nodes without inbound edges left.</li> </ol> <p>Put together, the time complexity of top sort is \(O(\|V\| + \|E\|)\), and the space complexity, \(O(\|V\|)\).</p> <h2 id="binary-tree-problems">Binary tree problems</h2> <h3 id="tree-traversals">Tree traversals</h3> <p>As for graph related problems, problems involving trees often require traversals, either <a href="#depth-first-traversal">depth</a> or <a href="#breadth-first-traversal">breadth</a> first. The same principles and data structures apply. For a tree with \(n\) nodes, the time complexity is \(O(n)\), and the time complexity is \(O(n)\). If the tree is balanced, depth first has a space complexity of \(O(\log n)\).</p> <h3 id="further-resources">Further resources</h3> <ul> <li><a href="https://www.youtube.com/watch?v=tWVWeAqZ0WU">Graph Algorithms for Technical Interviews - Full Course</a></li> </ul> <h2 id="two-pointers">Two pointers</h2> <p>The two pointer approach can be used in problems involving searching, comparing and modifying elements in a sequence. A naive approach would involve two loops, and hence take \(O(n^2)\) time. Instead, in the two pointer approach we have two pointers storing indexes, and, by moving them in a coordinate way, we can reduce the complexity down to \(O(n)\). Generally speaking, the two pointers can either move in the same direction, or in opposite directions.</p> <p><strong>Note:</strong> Some two pointer problems require the sequence to be sorted to move the pointers efficiently. For instance, to find the two elements that produce a sum, having a sorted array is key to know which pointer to increase or decrease.</p> <p><strong>Note:</strong> Sometimes we need to iterate an \(m \times n\) table. While we can use two pointers for that, we can to with a single pointer \(i \in [0, m \times n)\): <code class="language-plaintext highlighter-rouge">row = i // n</code>, <code class="language-plaintext highlighter-rouge">col = i % n</code>.</p> <h4 id="sliding-window-problems">Sliding window problems</h4> <p>Sliding window problems are a type of same direction pointer problems. They are optimization problems involving <strong>contiguous</strong> sequences (substrings, subarrays, etc.), particularly involving cumulative properties. The general approach consists on starting with two pointers, <code class="language-plaintext highlighter-rouge">st</code> and <code class="language-plaintext highlighter-rouge">ed</code> at the beginning of the sequence. We can keep track of the cumulative property and update it as the window expands or contracts. We keep increasing <code class="language-plaintext highlighter-rouge">st</code> until we find a window that meets our constraint. Then, we try to reduce it by increasing <code class="language-plaintext highlighter-rouge">st</code>, until it doesn’t meet it anymore. Then, we go back to increasing <code class="language-plaintext highlighter-rouge">ed</code>, and so on.</p> <h2 id="permutation-problems">Permutation problems</h2> <p>Permutation problems can be tackled by <a href="#recursion">recursion</a>.</p> <h2 id="backtracking-problems">Backtracking problems</h2> <p>Backtracking is a family of algorithms characterized by:</p> <ul> <li>The candidate solutions are built incrementally.</li> <li>The solutions have <strong>constraints</strong>, so not all candidates are valid.</li> </ul> <p>Since solutions are built incrementally, backtracting they can be visualized as a <strong>depth-first search</strong> on a tree. At each node, the algorithm checks if it will lead to a valid solution. If the answer is negative, it will <em>backtrack</em> to the parent node, and continue the process.</p> <p><strong>Note:</strong> Because of the need to backtrack, a recursive implementation of the DFS is often more convenient, since undoing a step simply involves invoking <code class="language-plaintext highlighter-rouge">return</code>. A stack might require a more elaborate implementation.</p> <h3 id="a-recipe-for-backtracking-problems">A recipe for backtracking problems</h3> <p>As we will see in a few examples, the solution to a backtracking problem looks like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">candidate</span><span class="p">):</span>

    <span class="k">if</span> <span class="nf">is_solution</span><span class="p">(</span><span class="n">candidate</span><span class="p">):</span>
        <span class="nf">output</span><span class="p">(</span><span class="n">candidate</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="nf">get_children</span><span class="p">(</span><span class="n">candidate</span><span class="p">):</span>
        <span class="k">if</span> <span class="nf">is_valid</span><span class="p">(</span><span class="n">child</span><span class="p">):</span>
            <span class="nf">place</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
            <span class="nf">solve</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
            <span class="nf">remove</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</code></pre></div></div> <h3 id="examples">Examples</h3> <h4 id="the-eight-queens-puzzle">The eight queens puzzle</h4> <p>A famous application of backtracking is solving the <a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle">eight queens puzzle</a>:</p> <blockquote> <p>The eight queens puzzle is the problem of placing eight chess queens on an 8×8 chessboard so that no two queens threaten each other; thus, a solution requires that no two queens share the same row, column, or diagonal. There are 92 solutions.</p> </blockquote> <p>I present here a solution, which mirrors the recipe presented above:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">board</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">under_attack</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">row_i</span><span class="p">,</span> <span class="n">col_i</span> <span class="ow">in</span> <span class="n">board</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">row_i</span> <span class="o">==</span> <span class="n">row</span> <span class="ow">or</span> <span class="n">col_i</span> <span class="o">==</span> <span class="n">col</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>

        <span class="c1"># check the diagonals
</span>        <span class="k">if</span> <span class="nf">abs</span><span class="p">(</span><span class="n">row_i</span> <span class="o">-</span> <span class="n">row</span><span class="p">)</span> <span class="o">==</span> <span class="nf">abs</span><span class="p">(</span><span class="n">col_i</span> <span class="o">-</span> <span class="n">col</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">True</span>

    <span class="k">return</span> <span class="bp">False</span>

<span class="k">def</span> <span class="nf">eight_queens</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>

    <span class="k">if</span> <span class="n">row</span> <span class="o">==</span> <span class="mi">8</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span>

    <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
        <span class="c1"># check the constraints: the explored square
</span>        <span class="c1"># is not under attack
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="nf">under_attack</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">):</span>
            <span class="n">board</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">))</span>
            <span class="c1"># explore a (so-far) valid path
</span>            <span class="n">count</span> <span class="o">=</span> <span class="nf">eight_queens</span><span class="p">(</span><span class="n">row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
            <span class="c1"># backtrack!
</span>            <span class="n">board</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>

    <span class="k">return</span> <span class="n">count</span>

<span class="n">total_solutions</span> <span class="o">=</span> <span class="nf">eight_queens</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Total solutions: </span><span class="si">{</span><span class="n">total_solutions</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Total solutions: 92
</code></pre></div></div> <h4 id="solving-a-sudoku">Solving a sudoku</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="n">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>

<span class="n">board</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]]</span>


<span class="k">def</span> <span class="nf">is_valid</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>

    <span class="n">block_row</span><span class="p">,</span> <span class="n">block_col</span> <span class="o">=</span> <span class="p">(</span><span class="n">row</span> <span class="o">//</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="n">col</span> <span class="o">//</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="mi">3</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">num</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">elif</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">==</span> <span class="n">num</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">block_row</span> <span class="o">+</span> <span class="n">i</span> <span class="o">//</span> <span class="mi">3</span><span class="p">][</span><span class="n">block_col</span> <span class="o">+</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="n">num</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

    <span class="k">return</span> <span class="bp">True</span>


<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">board</span><span class="p">):</span>

    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>

            <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]:</span>
                <span class="k">continue</span>

            <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
                <span class="k">if</span> <span class="nf">is_valid</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
                    <span class="n">board</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">num</span>
                    <span class="k">if</span> <span class="nf">solve</span><span class="p">(</span><span class="n">board</span><span class="p">):</span>
                        <span class="k">return</span> <span class="bp">True</span>
                    <span class="n">board</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>

            <span class="k">return</span> <span class="bp">False</span>

    <span class="k">return</span> <span class="bp">True</span>

<span class="k">if</span> <span class="nf">solve</span><span class="p">(</span><span class="n">board</span><span class="p">):</span>
    <span class="nf">pprint</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">No solution exists.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[2, 7, 4, 1, 9, 3, 8, 6, 5],
 [6, 5, 8, 2, 7, 4, 3, 1, 9],
 [1, 9, 3, 6, 5, 8, 4, 2, 7],
 [5, 8, 1, 7, 4, 6, 2, 9, 3],
 [7, 4, 6, 9, 3, 2, 1, 5, 8],
 [9, 3, 2, 5, 8, 1, 6, 7, 4],
 [3, 2, 7, 8, 1, 9, 5, 4, 6],
 [4, 6, 5, 3, 2, 7, 9, 8, 1],
 [8, 1, 9, 4, 6, 5, 7, 3, 2]]
</code></pre></div></div> <h4 id="permutations-of-a-list">Permutations of a list</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">permute</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>

    <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">size</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">size</span><span class="p">:</span> <span class="k">return</span> <span class="p">[[]]</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">size</span><span class="p">):</span>
        <span class="c1"># exclude element i
</span>        <span class="n">rest</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>
        <span class="n">perms</span> <span class="o">=</span> <span class="p">[[</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+</span> <span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nf">permute</span><span class="p">(</span><span class="n">rest</span><span class="p">)]</span>
        <span class="n">res</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">perms</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div> <h2 id="dynamic-programming">Dynamic programming</h2> <p>The hallmark of a dynamic programming problem are <strong>overlapping subproblems</strong>.</p> <p>The key to the problem is identifying the <em>trivially</em> smallest input, the case for which the answer is trivially simple.</p> <p>We have two strategies:</p> <ul> <li>Memoization</li> <li>Tabulation</li> </ul> <p>Draw a strategy!!</p> <h3 id="recursion--memoization">Recursion + memoization</h3> <h4 id="recursion">Recursion</h4> <p>Recursion is a technique in to solve problems which in turn depend on solving smaller subproblems. It permeates many other methods, like <a href="#backtracking-problems">backtracking</a>, <a href="#merge-sort">merge sort</a>, <a href="#quick-sort">quick sort</a>, <a href="#binary-search">binary search</a> or <a href="#tree-traversal">tree traversal</a>.</p> <p>Recursive functions have two parts:</p> <ol> <li>Definition of the <strong>base case(s)</strong>, the case(s) in which solving a problem is trivial, and a solution is provided, stopping the recursion.</li> <li>Divide the problem into smaller subproblems, which are sent off to the recursive function.</li> </ol> <p>The space complexity of recursion will be, at least, the length of the stack which accumulates all the function calls.</p> <p><strong>Note:</strong> CPython’s recursion limit is 1,000. This can limit to the depth of the problems we can tackle.</p> <h4 id="recursion--memoization-recipe">Recursion + memoization recipe</h4> <p>In DP, combining recursion and memoization is a powerful way to trade space complexity for time complexity. Specifically, since problems are overlapping, it is likely we are solving the same subproblems over and over, which can get expensive due to recursion. Caching them can greatly improve the speed of our algorithm.</p> <p>Here is a recipe for solving these problems (from <a href="https://www.youtube.com/watch?v=oBt53YbR9Kk">here</a>):</p> <ol> <li>Visualize the problem as a tree</li> <li>Implement the tree using recursion, in which the leaves are the base cases. This will produce the brute force solution.</li> <li>Test it for a few simple cases.</li> <li>Memoize it! <ol> <li>Add a memo dictionary, which keeps getting passed in the recursive calls</li> <li>Add the base cases to the dictionary</li> <li>Store the return values into the memo</li> <li>Return the right value from memo</li> </ol> </li> </ol> <h4 id="computational-complexity">Computational complexity</h4> <p>The computational complexity will be impacted by two factors:</p> <ul> <li><code class="language-plaintext highlighter-rouge">m</code>: the average length of the elements of the input. For instance, if the input is a list, <code class="language-plaintext highlighter-rouge">m = len(input)</code>; it it is an integer, it is <code class="language-plaintext highlighter-rouge">m = input</code>. This will impact the height of the tree.</li> <li><code class="language-plaintext highlighter-rouge">n</code>: the length of the input. This will impact the branching factor. For instance, if the input is a list, <code class="language-plaintext highlighter-rouge">n = len(input)</code>.</li> </ul> <p><strong>Brute force:</strong> for every node, we have a <code class="language-plaintext highlighter-rouge">n</code> options. Usually, the time complexity of DP problems will be exponential, of \(O(n^m*k)\), where $k$ is the complexity of a single recursive call. The memory complexity is the call stack, \(O(m)\).</p> <p><strong>Memoized:</strong> memoization reduces the branching factor by storing previous results. In other words, it trades time complexity for space complexity; usually both become polynomial.</p> <h4 id="tabulation-recipe">Tabulation recipe</h4> <p>Taken from <a href="https://www.youtube.com/watch?v=oBt53YbR9Kk">here</a>:</p> <ol> <li>Visualize the problem as a table. Specifically: <ol> <li>Design the size of the table based on the inputs. Often the size of the table is one unit longer in each dimension than the respective inputs. That allows us to include the trivial case (usually in the first position), and nicely aligns our input with the last index.</li> <li>Pick the default value, usually based on what the output value should be.</li> <li>Infuse the trivial answer into the table, the case for which we immediately know the answer</li> </ol> </li> <li>Iterate through the table, filling the positions ahead based on the current position.</li> <li>Retrieve the answer from the relevant position.</li> </ol> <p>Some caveats:</p> <ol> <li>Note that sometimes the trivial case might not have the solution we need to solve the algorithm. Watch out for such situations.</li> </ol> <h3 id="additional-resources">Additional resources</h3> <p>These are some materials that helped me understand dynamic programming (the order matters!):</p> <ol> <li><a href="https://avikdas.com/2019/04/15/a-graphical-introduction-to-dynamic-programming.html">A graphical introduction to dynamic programming</a></li> <li><a href="https://www.youtube.com/watch?v=oBt53YbR9Kk">Dynamic Programming - Learn to Solve Algorithmic Problems &amp; Coding Challenges</a></li> <li><a href="https://qsantos.fr/2024/01/04/dynamic-programming-is-not-black-magic/">Dynamic Programming is not Black Magic</a></li> <li><a href="https://leetcode.com/discuss/study-guide/662866/DP-for-Beginners-Problems-or-Patterns-or-Sample-Solutions">LeetCode: DP for Beginners</a></li> </ol> <h3 id="solved-problems">Solved problems</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">how_sum</span><span class="p">(</span><span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">memo</span><span class="p">:</span> <span class="nb">dict</span> <span class="o">=</span> <span class="p">{})</span> <span class="o">-&gt;</span> <span class="bp">None</span> <span class="o">|</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">target</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="n">target</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="n">target</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">.</span><span class="nf">keys</span><span class="p">():</span> <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
        <span class="n">solution</span> <span class="o">=</span> <span class="nf">how_sum</span><span class="p">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">num</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">memo</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">solution</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span> <span class="o">=</span> <span class="n">solution</span> <span class="o">+</span> <span class="p">[</span><span class="n">num</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span>
    <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">return</span> <span class="bp">None</span>

<span class="nf">how_sum</span><span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">14</span><span class="p">])</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">best_sum</span><span class="p">(</span><span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">memo</span><span class="p">:</span> <span class="nb">dict</span> <span class="o">=</span> <span class="p">{})</span> <span class="o">-&gt;</span> <span class="bp">None</span> <span class="o">|</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>

    <span class="k">if</span> <span class="n">target</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span> <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">target</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="n">target</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="bp">None</span>

    <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">length_best_solution</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="sh">"</span><span class="s">inf</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
        <span class="n">solution</span> <span class="o">=</span> <span class="nf">best_sum</span><span class="p">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">num</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">memo</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">solution</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">solution</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">length_best_solution</span><span class="p">:</span>
            <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span> <span class="o">=</span> <span class="n">solution</span> <span class="o">+</span> <span class="p">[</span><span class="n">num</span><span class="p">]</span>
            <span class="n">length_best_solution</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">best_sum</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">]))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">best_sum</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">best_sum</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">25</span><span class="p">]))</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">can_construct</span><span class="p">(</span><span class="n">target</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">dictionary</span><span class="p">:</span> <span class="nb">list</span><span class="p">,</span> <span class="n">memo</span><span class="p">:</span> <span class="nb">dict</span> <span class="o">=</span> <span class="p">{})</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>

    <span class="k">if</span> <span class="n">target</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span> <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">target</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>

    <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">dictionary</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">target</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="n">new_target</span> <span class="o">=</span> <span class="n">target</span><span class="p">.</span><span class="nf">removeprefix</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
            <span class="k">if</span> <span class="nf">can_construct</span><span class="p">(</span><span class="n">new_target</span><span class="p">,</span> <span class="n">dictionary</span><span class="p">,</span> <span class="n">memo</span><span class="p">):</span>
                <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="k">break</span>

    <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">can_construct</span><span class="p">(</span><span class="sh">"</span><span class="s">abcdef</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">ab</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">abc</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">def</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">abcd</span><span class="sh">"</span><span class="p">]))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">can_construct</span><span class="p">(</span><span class="sh">"</span><span class="s">skateboard</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">bo</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">rd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ate</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">t</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ska</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sk</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">boar</span><span class="sh">"</span><span class="p">]))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">can_construct</span><span class="p">(</span><span class="sh">"</span><span class="s">eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">e</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eeee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eeeee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eeeee</span><span class="sh">"</span><span class="p">]))</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">count_construct</span><span class="p">(</span><span class="n">target</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">dictionary</span><span class="p">:</span> <span class="nb">list</span><span class="p">,</span> <span class="n">memo</span><span class="p">:</span> <span class="nb">dict</span> <span class="o">=</span> <span class="p">{})</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>

    <span class="k">if</span> <span class="n">target</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span> <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">target</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>

    <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">dictionary</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">target</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="n">new_target</span> <span class="o">=</span> <span class="n">target</span><span class="p">.</span><span class="nf">removeprefix</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
            <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span> <span class="o">+=</span> <span class="nf">count_construct</span><span class="p">(</span><span class="n">new_target</span><span class="p">,</span> <span class="n">dictionary</span><span class="p">,</span> <span class="n">memo</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">count_construct</span><span class="p">(</span><span class="sh">"</span><span class="s">abcdef</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">ab</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">abc</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">def</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">abcd</span><span class="sh">"</span><span class="p">]))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">count_construct</span><span class="p">(</span><span class="sh">"</span><span class="s">purple</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">purp</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">p</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ur</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">le</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">purpl</span><span class="sh">"</span><span class="p">]))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">count_construct</span><span class="p">(</span><span class="sh">"</span><span class="s">skateboard</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">bo</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">rd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ate</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">t</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ska</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sk</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">boar</span><span class="sh">"</span><span class="p">]))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">count_construct</span><span class="p">(</span><span class="sh">"</span><span class="s">eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">e</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eeee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eeeee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eeeee</span><span class="sh">"</span><span class="p">]))</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">all_construct</span><span class="p">(</span><span class="n">target</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">dictionary</span><span class="p">:</span> <span class="nb">list</span><span class="p">,</span> <span class="n">memo</span><span class="p">:</span> <span class="nb">dict</span> <span class="o">=</span> <span class="p">{})</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]]:</span>

    <span class="k">if</span> <span class="n">target</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span> <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">target</span><span class="p">:</span> <span class="k">return</span> <span class="p">[[]]</span>

    <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">dictionary</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">target</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="n">new_target</span> <span class="o">=</span> <span class="n">target</span><span class="p">.</span><span class="nf">removeprefix</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
            <span class="n">constructs</span> <span class="o">=</span> <span class="nf">all_construct</span><span class="p">(</span><span class="n">new_target</span><span class="p">,</span> <span class="n">dictionary</span><span class="p">,</span> <span class="n">memo</span><span class="p">)</span>
            <span class="n">constructs</span> <span class="o">=</span> <span class="p">[[</span><span class="n">word</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">constructs</span><span class="p">]</span>
            <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">].</span><span class="nf">extend</span><span class="p">(</span><span class="n">constructs</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">target</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">all_construct</span><span class="p">(</span><span class="sh">"</span><span class="s">abcdef</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">ab</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">abc</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">def</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">abcd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ef</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">c</span><span class="sh">"</span><span class="p">]))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">all_construct</span><span class="p">(</span><span class="sh">"</span><span class="s">purple</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">purp</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">p</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ur</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">le</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">purpl</span><span class="sh">"</span><span class="p">]))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">all_construct</span><span class="p">(</span><span class="sh">"</span><span class="s">skateboard</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">bo</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">rd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ate</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">t</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ska</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sk</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">boar</span><span class="sh">"</span><span class="p">]))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">all_construct</span><span class="p">(</span><span class="sh">"</span><span class="s">eeeeeeeeeeeeeeeeeeeeef</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">e</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eeee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eeeee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eeeee</span><span class="sh">"</span><span class="p">]))</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fib_t</span><span class="p">(</span><span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>

    <span class="n">table</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">table</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">table</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">table</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">+=</span> <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">table</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">fib_t</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">fib_t</span><span class="p">(</span><span class="mi">50</span><span class="p">))</span>

<span class="sb">``</span><span class="err">`</span><span class="n">python</span>
<span class="k">def</span> <span class="nf">grid_traveler</span><span class="p">(</span><span class="n">m</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>

    <span class="n">grid</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span>
    <span class="n">grid</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="p">:</span>
                <span class="n">grid</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">:</span>
                <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">grid</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">grid_traveler</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">grid_traveler</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">grid_traveler</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">grid_traveler</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">grid_traveler</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">18</span><span class="p">))</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">can_sum_t</span><span class="p">(</span><span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="nb">list</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Complexity:
        - Time: O(m*n)
        - Space: O(m)
    </span><span class="sh">"""</span>

    <span class="n">grid</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">target</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="k">continue</span>

        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">num</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">):</span>
                <span class="n">grid</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">return</span> <span class="n">grid</span><span class="p">[</span><span class="n">target</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">can_sum_t</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span> <span class="p">,</span><span class="mi">3</span><span class="p">]))</span> <span class="c1"># True
</span><span class="nf">print</span><span class="p">(</span><span class="nf">can_sum_t</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]))</span> <span class="c1"># True
</span><span class="nf">print</span><span class="p">(</span><span class="nf">can_sum_t</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span> <span class="p">,</span><span class="mi">4</span><span class="p">]))</span> <span class="c1"># False
</span><span class="nf">print</span><span class="p">(</span><span class="nf">can_sum_t</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]))</span> <span class="c1"># True
</span><span class="nf">print</span><span class="p">(</span><span class="nf">can_sum_t</span><span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">14</span><span class="p">]))</span> <span class="c1"># False
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">how_sum_t</span><span class="p">(</span><span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span> <span class="o">|</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">
    Complexity:
        - Time: O(m*n^2)
        - Space: O(m*n)
    </span><span class="sh">"""</span>
    <span class="n">grid</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">target</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">num</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">):</span>
                <span class="n">grid</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">copy</span><span class="p">()</span>
                <span class="n">grid</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">num</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">grid</span><span class="p">[</span><span class="n">target</span><span class="p">]</span>


<span class="nf">print</span><span class="p">(</span><span class="nf">how_sum_t</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span> <span class="p">,</span><span class="mi">3</span><span class="p">]))</span> <span class="c1"># [2, 2, 3]
</span><span class="nf">print</span><span class="p">(</span><span class="nf">how_sum_t</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">]))</span> <span class="c1"># [3, 4]
</span><span class="nf">print</span><span class="p">(</span><span class="nf">how_sum_t</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span> <span class="p">,</span><span class="mi">4</span><span class="p">]))</span> <span class="c1"># None
</span><span class="nf">print</span><span class="p">(</span><span class="nf">how_sum_t</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]))</span> <span class="c1"># [2, 2, 2, 2]
</span><span class="nf">print</span><span class="p">(</span><span class="nf">how_sum_t</span><span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">14</span><span class="p">]))</span> <span class="c1"># None
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">best_sum_t</span><span class="p">(</span><span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">memo</span><span class="p">:</span> <span class="nb">dict</span> <span class="o">=</span> <span class="p">{})</span> <span class="o">-&gt;</span> <span class="bp">None</span> <span class="o">|</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">
    Complexity:
        - Time: O(m*n^2)
        - Space: O(m^2)
    </span><span class="sh">"""</span>

    <span class="n">grid</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">target</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">num</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">num</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">num</span><span class="p">])</span> <span class="o">&gt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">]):</span>
                    <span class="n">grid</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">copy</span><span class="p">()</span>
                    <span class="n">grid</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">num</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">grid</span><span class="p">[</span><span class="n">target</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">best_sum_t</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span> <span class="p">,</span><span class="mi">3</span><span class="p">]))</span> <span class="c1"># [2, 2, 3]
</span><span class="nf">print</span><span class="p">(</span><span class="nf">best_sum_t</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">]))</span> <span class="c1"># [7]
</span><span class="nf">print</span><span class="p">(</span><span class="nf">best_sum_t</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span> <span class="p">,</span><span class="mi">4</span><span class="p">]))</span> <span class="c1"># None
</span><span class="nf">print</span><span class="p">(</span><span class="nf">best_sum_t</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]))</span> <span class="c1"># [5, 3]
</span><span class="nf">print</span><span class="p">(</span><span class="nf">best_sum_t</span><span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">14</span><span class="p">]))</span> <span class="c1"># None
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">can_construct_t</span><span class="p">(</span><span class="n">target</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">words</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Complexity:
        - Time: O(m^2*n)
        - Space: O(m)
    </span><span class="sh">"""</span>

    <span class="n">grid</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">target</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)):</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="k">continue</span>

        <span class="n">prefix</span> <span class="o">=</span> <span class="n">target</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">):</span>
                <span class="k">continue</span>

            <span class="k">if</span> <span class="n">target</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="n">word</span><span class="p">):</span>
                <span class="n">grid</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">)]</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">return</span> <span class="n">grid</span><span class="p">[</span><span class="nf">len</span><span class="p">(</span><span class="n">target</span><span class="p">)]</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">can_construct_t</span><span class="p">(</span><span class="sh">"</span><span class="s">abcdef</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">ab</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">abc</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">def</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">abcd</span><span class="sh">"</span><span class="p">]))</span> <span class="c1"># True
</span><span class="nf">print</span><span class="p">(</span><span class="nf">can_construct_t</span><span class="p">(</span><span class="sh">"</span><span class="s">skateboard</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">bo</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">rd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ate</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">t</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ska</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sk</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">boar</span><span class="sh">"</span><span class="p">]))</span> <span class="c1"># False
</span><span class="nf">print</span><span class="p">(</span><span class="nf">can_construct_t</span><span class="p">(</span><span class="sh">"</span><span class="s">enterapotentpot</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">p</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ent</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">enter</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ot</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">o</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">t</span><span class="sh">"</span><span class="p">]))</span> <span class="c1"># True
</span><span class="nf">print</span><span class="p">(</span><span class="nf">can_construct_t</span><span class="p">(</span><span class="sh">"</span><span class="s">eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">e</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eeee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eeeee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eeeee</span><span class="sh">"</span><span class="p">]))</span> <span class="c1"># False
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">count_construct_t</span><span class="p">(</span><span class="n">target</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">words</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Complexity:
        - Time: O(m^2*n)
        - Space: O(m)
    </span><span class="sh">"""</span>
    <span class="n">grid</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">target</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="k">continue</span>

        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">):</span>
                <span class="k">continue</span>

            <span class="n">prefix</span> <span class="o">=</span> <span class="n">target</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>

            <span class="k">if</span> <span class="n">target</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="n">word</span><span class="p">):</span>
                <span class="n">grid</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">)]</span> <span class="o">+=</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">grid</span><span class="p">[</span><span class="nf">len</span><span class="p">(</span><span class="n">target</span><span class="p">)]</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">count_construct_t</span><span class="p">(</span><span class="sh">"</span><span class="s">abcdef</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">ab</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">abc</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">def</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">abcd</span><span class="sh">"</span><span class="p">]))</span> <span class="c1"># 1
</span><span class="nf">print</span><span class="p">(</span><span class="nf">count_construct_t</span><span class="p">(</span><span class="sh">"</span><span class="s">purple</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">purp</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">p</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ur</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">le</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">purpl</span><span class="sh">"</span><span class="p">]))</span> <span class="c1"># 2
</span><span class="nf">print</span><span class="p">(</span><span class="nf">count_construct_t</span><span class="p">(</span><span class="sh">"</span><span class="s">skateboard</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">bo</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">rd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ate</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">t</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ska</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sk</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">boar</span><span class="sh">"</span><span class="p">]))</span> <span class="c1"># 0
</span><span class="nf">print</span><span class="p">(</span><span class="nf">count_construct_t</span><span class="p">(</span><span class="sh">"</span><span class="s">enterapotentpot</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">p</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ent</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">enter</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ot</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">o</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">t</span><span class="sh">"</span><span class="p">]))</span> <span class="c1"># 4
</span><span class="nf">print</span><span class="p">(</span><span class="nf">count_construct_t</span><span class="p">(</span><span class="sh">"</span><span class="s">eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">e</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eeee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eeeee</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">eeeee</span><span class="sh">"</span><span class="p">]))</span> <span class="c1"># 0
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">copy</span> <span class="kn">import</span> <span class="n">deepcopy</span>

<span class="k">def</span> <span class="nf">all_construct_t</span><span class="p">(</span><span class="n">target</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">words</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]]:</span>
    <span class="sh">"""</span><span class="s">
    Complexity:
        - Time: O(n^m)
        - Memory: O(n^m)
    </span><span class="sh">"""</span>

    <span class="n">grid</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">target</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span>
    <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">[[]]</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)):</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="k">continue</span>

        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">))</span> <span class="o">&gt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">grid</span><span class="p">):</span>
                <span class="k">continue</span>

            <span class="n">prefix</span> <span class="o">=</span> <span class="n">target</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span>

            <span class="k">if</span> <span class="n">target</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="n">word</span><span class="p">):</span>
                <span class="n">new_constructs</span> <span class="o">=</span> <span class="nf">deepcopy</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">new_constructs</span><span class="p">:</span>
                    <span class="n">x</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>

                <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">)]:</span>
                    <span class="n">grid</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">)].</span><span class="nf">extend</span><span class="p">(</span><span class="n">new_constructs</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">grid</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">)]</span> <span class="o">=</span> <span class="n">new_constructs</span>


    <span class="k">return</span> <span class="n">grid</span><span class="p">[</span><span class="nf">len</span><span class="p">(</span><span class="n">target</span><span class="p">)]</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">all_construct_t</span><span class="p">(</span><span class="sh">"</span><span class="s">abcdef</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">ab</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">abc</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">def</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">abcd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ef</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">c</span><span class="sh">"</span><span class="p">]))</span> <span class="c1"># [['ab', 'cd', 'ef'], ['ab', 'c', 'def'], ['abc', 'def'], ['abcd', 'ef']]
</span><span class="nf">print</span><span class="p">(</span><span class="nf">all_construct_t</span><span class="p">(</span><span class="sh">"</span><span class="s">purple</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">purp</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">p</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ur</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">le</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">purpl</span><span class="sh">"</span><span class="p">]))</span> <span class="c1"># [['purp', 'le'], ['p', 'ur', 'p', 'le']]
</span><span class="nf">print</span><span class="p">(</span><span class="nf">all_construct_t</span><span class="p">(</span><span class="sh">"</span><span class="s">skateboard</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">bo</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">rd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ate</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">t</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ska</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sk</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">boar</span><span class="sh">"</span><span class="p">]))</span> <span class="c1"># []
</span><span class="nf">print</span><span class="p">(</span><span class="nf">all_construct_t</span><span class="p">(</span><span class="sh">"</span><span class="s">enterapotentpot</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">p</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ent</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">enter</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ot</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">o</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">t</span><span class="sh">"</span><span class="p">]))</span> <span class="c1"># # [['enter', 'a', 'p', 'ot', 'ent', 'p', 'ot'], ['enter', 'a', 'p', 'ot', 'ent', 'p', 'o', 't'], ['enter', 'a', 'p', 'o', 't', 'ent', 'p', 'ot'], ['enter', 'a', 'p', 'o', 't', 'ent', 'p', 'o', 't']]
</span></code></pre></div></div> <h1 id="how-to-solve-a-problem">How to solve a problem</h1> <p>Stakeholders will sometimes come to us with problems, and we might need to produce a good algorithmic solution pretty quickly; say 45-60 minutes. This is a template on how to tackle these situations.</p> <h2 id="1-problem-statement">1. Problem statement</h2> <p>If our stakeholder is prepared, they might come with a written down problem statement. They might share it with us ahead of our meeting or right at the start.</p> <ol> <li>Make sure you understand the problem: <ol> <li>Paraphrase the problem back to them.</li> <li>If examples (input-output pairs) are provided, walk through one of them.</li> <li>Otherwise, generate a few examples and infer the expected output.</li> </ol> </li> <li>Ask clarifying questions: <ol> <li>About the input: <ul> <li>What are its data types? Is it sorted? Do we know the range of the integers? (Can they be negative?) A batch of a stream? Et cetera.</li> <li>Expected input size: if they know it, might give an idea of the complexity we should aim for. For inputs of size 1 to 100, \(O(n^2)\) is acceptable; for larger inputs, we should do better.</li> </ul> </li> <li>About the edge cases: empty input, invalid, etc.</li> <li>Ask about the specific runtime our solution will need. That will be very useful to screen out solutions and algorithms.</li> </ol> </li> <li>If possible, draw, or at least visualize the problem.</li> </ol> <h2 id="2-brainstorming">2. Brainstorming</h2> <p>While it can be tempting to implement a solution right away, it is worth spending some time drafting the problem. After all, our stakeholder might have given it some thought already, and could be able to point us in the right direction.</p> <ol> <li>Try to match this problem to the problems you have seen. Regarding data structures: <ul> <li>Hash maps: if we need fast lookups</li> <li>Graphs: if we are working with associated entities</li> <li>Stacks and queues: if the input has a nested quality</li> <li>Heaps: if we need to perform scheduling/orderings based on a priority</li> <li>Trees and tries: if we need efficient lookup and storage of strings</li> <li>Linked lists: if we require fast insertions and deletions, especially when order matters</li> <li>Union-finds: if we’re investigating the if sets are connected or cycles exist in a graph Regarding algorithms, there are some recurring ones:</li> <li>Depth-first search</li> <li>Binary Search</li> <li>Sorting Algorithms</li> </ul> </li> <li>Don’t be shy! Let your stakeholder hear out your thought process. They will surely appreciate knowing whats on your mind, and be able to chip in. Specially, if they do say something, <strong>listen</strong>. They are the subject matter experts after all!</li> <li>Once you seem to have converged to a specific approach, state the main parts of the algorithm and make sure they understand and agree. <ul> <li>We might want to start with a suboptimal solution, as long as we let them know that we know that! Once we have that working, we can identify the main bottlenecks and go back to the drawing board.</li> </ul> </li> </ol> <h2 id="3-implementation">3. Implementation</h2> <p>During the implementation phase, it might help to go from the big picture to the small picture. Start by defining the global flow of the program, calling unimplemented functions with clear names. This will allow you to make sure your proposal make sense before getting entangled in the specifics.</p> <p>In order to allow our stakeholder follow our logic, it is important that they can follow along:</p> <ul> <li>Make sure our stakeholder is ok with us using additional dependencies. They might prefer to keep the algorithm lean!</li> <li>Explain why you are making each decision.</li> <li>If you realize your solution might not work, let them know. You might need to go back to brainstorming.</li> <li>Stick to the language conventions. For instance, in PEP8: <ul> <li>Functions are separated by two lines</li> </ul> </li> <li>Keep your code clean: avoid duplicate code, use helper functions, keep function and variable names understandable.</li> <li>Time is limited, so you might want to cut corners, e.g.: <ul> <li>Comments</li> <li>Function typing</li> <li>Checking off-by-one errors when iterating arrays However, let your stakeholder know!</li> </ul> </li> </ul> <p>Once you have a working solution, revisit it:</p> <ul> <li>Scan the code for mistakes. For instance, when working with arrays, index errors are common.</li> <li>Compute the complexity of your code. This might hint at what could be improved. It might also highlight tradeoffs.</li> <li>Identify redundant work</li> <li>Identify overlapping and repeated computations. The algorithm might be sped up by memoization.</li> </ul> <h2 id="4-testing-and-debugging">4. Testing and debugging</h2> <p>Once our solution is ready, it might be a good idea to give it a go. Simply call your function on a few examples. Consider:</p> <ul> <li>“Normal” inputs</li> <li>Trivial inputs</li> <li>Edge inputs</li> <li>Invalid inputs</li> </ul> <p>If some examples fail, we need to debug our code. Throw in a few print statements, predict what you expect to see, and go for it.</p> <h2 id="5-follow-ups">5. Follow-ups</h2> <p>After successfully presenting a solution, our stakeholder might have some follow-up questions:</p> <ul> <li>About our solution: <ul> <li>Time and space complexity? Usually, we should consider the worst case complexity, but if the amortized case is significantly better you should point it out.</li> <li>Specific questions about the choice of algorithm, data structure, loops, etc.</li> <li>What are possible optimizations? <ul> <li>While abstracting specific aspects into functions is helpful, it might also be less efficient (e.g., if we have to iterate the input multiple times instead of one).</li> <li>Identify repeated computations.</li> </ul> </li> <li>Consider non-technical constraints, such as development time, maintainability, or extensibility.</li> </ul> </li> <li>Identify the best theoretical time complexity. This involves considering what is the minimum number of operations involved. For instance if we need to visit every element, probably \(O(n)\) is optimal.</li> </ul> <p><strong>Note:</strong> some algorithms have some implicit and potentially unexpected behaviors. <code class="language-plaintext highlighter-rouge">Ctrl + F</code> “Note:” in order to find some of them.</p> <h2 id="further-reading-1">Further reading</h2> <ul> <li><a href="https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-75-LeetCode-Questions-to-Save-Your-Time-OaM1orEU">“Blind 75” problem set</a></li> <li><a href="https://leetcode.com/explore/interview/card/cheatsheets/720/resources/4723/">Code templates</a></li> <li><a href="https://www.techinterviewhandbook.org/coding-interview-techniques/">Top techniques to approach and solve coding interview questions</a></li> <li><a href="https://sebinsua.com/algorithmic-bathwater#what-kind-of-problem-do-i-have">What kind of problem do I have?</a></li> </ul>]]></content><author><name></name></author><category term="algorithms"/><category term="data-structures"/><category term="coding"/><summary type="html"><![CDATA[Common Problems and How to Solve Them]]></summary></entry></feed>